import{_ as u,a as r}from"./zsxq-bfUTmhj4.js";import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as k,c as v,a as c,w as t,b as n,d as s,e as a}from"./app-kVup0cn9.js";const m="/c-course/assets/image-20230911195644329-UY8MnPlB.png",b="/c-course/assets/image-20230911200031453-ZMT7ahhC.png",g="/c-course/assets/image-20230911215053964-p3ww803L.png",h="/c-course/assets/image-20230911215630163-oQ1dRDyr.png",y="/c-course/assets/image-20230911220352835-ZqOZoVPT.png",f="/c-course/assets/image-20231011161559532-rr3gYAgT.png",w={},_=a(`<h2 id="_1-字符串" tabindex="-1"><a class="header-anchor" href="#_1-字符串" aria-hidden="true">#</a> 1. 字符串</h2><h3 id="_1-1-字符串-string" tabindex="-1"><a class="header-anchor" href="#_1-1-字符串-string" aria-hidden="true">#</a> 1.1 字符串 String</h3><p>C 中的<strong>字符串</strong>是一个以 <strong>NULL</strong> 字符 <code>\\0</code> 结尾的字符数组。 字符串声明可以通过多种方式进行，每种方式都有各自考虑的因素。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> str_name<span class="token punctuation">[</span>str_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将创建一个由 <strong>str_len</strong> 个字符组成的名为 <strong>str_name</strong> 的字符串，并将其初始化为值&quot;string&quot;。</p><p>提供字符串文本初始化字符串时，编译器会自动将 NULL 字符 <code>\\0</code> 添加到字符数组<strong>末尾</strong>。</p><p>因此，声明数组大小至少比预期的字符串长度长一个字符。</p><p>下面的语句创建包含 NULL 字符的字符串。如果声明不包含 char 数组大小，则将根据初始化中字符串的长度加上 <code>\\0</code> 的值来计算：</p>`,9),q=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" str1"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"hello"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" str2"),n("span",{class:"token punctuation"},"["),s(),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"world"'),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"/* 长度 6 */"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"str1 is: %s, str2 is: %s"'),n("span",{class:"token punctuation"},","),s(" str1"),n("span",{class:"token punctuation"},","),s(" str2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),L=n("p",null,"一个字符串也可以声明为一组字符，如下：",-1),z=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" str3"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token char"},"'h'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'e'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'l'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'l'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'o'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'\\0'"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" str4"),n("span",{class:"token punctuation"},"["),s(),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token char"},"'h'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'e'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'l'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'l'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'o'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token char"},"'\\0'"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"/* 大小 6 */"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"str3 is: %s, str4 is: %s"'),n("span",{class:"token punctuation"},","),s(" str3"),n("span",{class:"token punctuation"},","),s(" str4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=a('<figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用这种方法，必须明确添加 NULL 字符 <code>\\0</code> 。注意，<strong>字符</strong>是用单引号 <code>&#39;</code> 括起来的。 与任何数组一样，字符串的名也为一个<strong>指针</strong>。 字符串是用双引号 <code>&quot;</code> 括起来的文本。</p><p>一个字符，如 <code>&#39;b&#39;</code> ，用单引号表示，不能作为一个字符串处理。</p><p>字符串指针的声明，如 <code>char *str = &quot;stuff&quot;;</code> 被认为是一个常量，不能改变其初始值。</p><p>为了安全和方便地操作字符串，你可以使用下面<strong>标准库</strong>中的字符串函数（不要忘记包括 <code>&lt;string.h&gt;</code> ）：</p><ul><li><code>strlen()</code> - 获取字符串的长度</li><li><code>strcat()</code> - 连接两个字符串</li><li><code>strcpy()</code> - 将一个字符串复制到另一个</li><li><code>strlwr()</code> - 将字符串转换为小写字母</li><li><code>strupr()</code> - 将字符串转换为大写字母</li><li><code>strrev()</code> - 反转字符串</li><li><code>strcmp()</code> - 比较两个字符串</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>字符串函数和字符串指针将在以后的课程中介绍。</p></div><ul><li>填空，将字符串声明为 char 数组：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___ str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-字符串输入" tabindex="-1"><a class="header-anchor" href="#_1-2-字符串输入" aria-hidden="true">#</a> 1.2 字符串输入</h3><p>程序通常是交互式的，要求用户输入。 为了从用户那里获取一行文本或其他字符串，C 提供了 <code>scanf()</code>、<code>gets()</code> 和 <code>fgets()</code> 函数。</p><p>你可以使用 <code>scanf()</code> 根据格式指定符来读取输入的字符串。</p><p><strong>例如：</strong></p>`,13),N=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" first_name"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"25"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" age"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Enter your first name and age: \\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%s %d"'),n("span",{class:"token punctuation"},","),s(" first_name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"\\nHi, %s. Your age is %d"'),n("span",{class:"token punctuation"},","),s(" first_name"),n("span",{class:"token punctuation"},","),s(" age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=a("<p>当 <code>scanf()</code> 用于读取字符串时，不需要用 <code>&amp;</code> 访问变量地址，因为数组名 <code>first_name</code> 就是一个指针。</p><p><code>scanf()</code> 在读到一个空格时就停止读取输入。</p><p>要读取一个有空格的字符串，请使用 <code>gets()</code> 函数。它读取输入，直到到达一个换行符 <code>\\n</code>（按了 Enter 键）。</p><p><strong>例如：</strong></p>",4),E=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" full_name"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Enter your full name: "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"gets"),n("span",{class:"token punctuation"},"("),s("full_name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"\\nHi, %s."'),n("span",{class:"token punctuation"},","),s(" full_name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("p",null,[s("替代 "),n("code",null,"gets()"),s(" 的一个更安全的方法是 "),n("code",null,"fgets()"),s("，它最多读取指定数量的字符。")],-1),J=n("p",null,[s("这种方法有助于防止"),n("strong",null,"缓冲区溢出"),s("，当字符串数组的大小不足以容纳输入的文本时，就会发生溢出。")],-1),S=n("p",null,[n("strong",null,"例如：")],-1),U=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" full_name"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Enter your full name: "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"fgets"),n("span",{class:"token punctuation"},"("),s("full_name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"stdin"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"\\nHi, %s"'),n("span",{class:"token punctuation"},","),s(" full_name"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=a(`<p><code>fgets()</code> 的参数是字符串名和读取的字符数，以及一个指向你想从哪里读取字符串的指针。<code>stdin</code> 意味着从<strong>标准输入</strong>，也就是从键盘上读取。</p><p><strong>gets</strong> 和 <strong>fgets</strong> 之间的另一个区别是，换行符 <code>\\n</code> <strong>fgets</strong> 会存储。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>fgets()</code> 只从 <strong>stdin</strong> 中读取 <strong>n-1</strong> 个字符，因为必须为 <code>\\0</code> 留出空间。</p></div><ul><li>填空，使用 <code>scanf</code> 函数从输入中读取字符串存储到 char 数组 <code>str</code> 中：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___ str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> ___ <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-字符串输出" tabindex="-1"><a class="header-anchor" href="#_1-3-字符串输出" aria-hidden="true">#</a> 1.3 字符串输出</h3><p>字符串输出由 <code>fputs()</code>、<code>puts()</code> 和 <code>printf()</code> 函数处理。</p><p><code>fputs()</code> 需要字符串名和一个指向你想打印字符串的位置的指针。要打印到屏幕上，使用 <strong>stdout</strong>，指的是<strong>标准输出</strong>。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> city<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your favorite city: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Note: for safety, use</span>
    <span class="token comment">// fgets(city, 40, stdin);</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; is a fun city.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>puts()</code> 函数仅接受一个字符串参数，也可以用来显示输出。然而，它在输出中添加了一个换行。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> city<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your favorite city: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Note: for safety, use</span>
    <span class="token comment">// fgets(city, 40, stdin);</span>
    
    <span class="token function">puts</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>填空，声明字符串，并使用 <code>fputs()</code> 函数将其输出到屏幕：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___ name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">;</span>
<span class="token function">___</span> <span class="token punctuation">(</span>___<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">;</span>
<span class="token function">fputs</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_2-字符串函数" tabindex="-1"><a class="header-anchor" href="#_2-字符串函数" aria-hidden="true">#</a> 2. 字符串函数</h2><h3 id="_2-1-sprintf-和-sscanf-函数" tabindex="-1"><a class="header-anchor" href="#_2-1-sprintf-和-sscanf-函数" aria-hidden="true">#</a> 2.1 sprintf 和 sscanf 函数</h3><p>可以使用 <code>sprintf()</code> 函数创建格式化的字符串。这对于用其他数据类型来构建字符串很有用。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> info<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> dept<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;HR&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> emp <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">&quot;The %s dept has %d employees.&quot;</span><span class="token punctuation">,</span> dept<span class="token punctuation">,</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个有用的函数是 <code>sscanf()</code>，用于扫描字符串中的值。 该函数从字符串中读取值，并将其存储在相应的变量地址中。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> info<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Snoqualmie WA 13190&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> city<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> state<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> population<span class="token punctuation">;</span>
    <span class="token function">sscanf</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">&quot;%s %s %d&quot;</span><span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token operator">&amp;</span>population<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d people live in %s, %s.&quot;</span><span class="token punctuation">,</span> population<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-string-h-标准库" tabindex="-1"><a class="header-anchor" href="#_2-2-string-h-标准库" aria-hidden="true">#</a> 2.2 string.h 标准库</h3><p><strong>string.h</strong> 库包含许多字符串函数。 在程序顶部的语句 <code>#include &lt;string.h&gt;</code> 使你能够访问以字符串函数：</p><ul><li><code>strlen(str)</code> 返回存储在 <code>str</code> 中的字符串的长度，不包括 NULL 字符。</li><li><code>strcat(str1, str2)</code> 将 <code>str2</code> 追加（连接）到 <code>str1</code> 的末尾，并返回指向 <code>str1</code> 的指针。</li><li><code>strcpy(str1, str2)</code> 将 <code>str2</code> 复制到 <code>str1</code> 。此功能对于为字符串分配新值很有用。</li></ul><p>下面的程序演示了 <code>string.h</code> 标准库中的函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;The grey fox&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> s2<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot; jumped.&quot;</span><span class="token punctuation">;</span>
    
    <span class="token function">strcat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Length of s1 is %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;s1 is now %s \\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>附加的 <strong>string.h</strong> 函数还包括：</p><ul><li><code>strncat(str1, str2, n)</code> 将 <code>str2</code> 的前 n 个字符追加（连接）到 <code>str1</code> 的末尾，并返回指向 <code>str1</code> 的指针。</li><li><code>strncpy(str1, str2, n)</code> 将 <code>str2</code> 的前 n 个字符复制到 <code>str1</code>。</li><li><code>strcmp(str1, str2)</code> 当 <code>str1</code> 等于 <code>str2</code> 时返回 0，在 <code>str1 &lt;str2</code> 时返回小于 0，在 <code>str1&gt; str2</code> 时返回大于0。</li><li><code>strncmp(str1, str2, n)</code> 当 <code>str1</code> 的前 n 个字符等于<code>str2</code>的前n个字符时，返回 0；当 <code>str1 &lt;str2</code> 时，小于0；当 <code>str1&gt; str2</code> 时，大于 0。</li><li><code>strchr(str1, c)</code> 返回指向 <code>str1</code> 中首次出现的 char c 的指针，如果找不到字符，则返回 NULL。</li><li><code>strrchr(str1,c)</code> 反向搜索 <code>str1</code> 并返回一个指向 char c 在 <code>str1</code> 中位置的指针；如果找不到字符，则返回 NULL。</li><li><code>strstr(str1,str2)</code> 返回指向 <code>str1</code> 中首次出现的 <code>str2</code> 的指针，如果未找到 <code>str2</code>，则返回 NULL。</li></ul><h3 id="_2-3-字符串转换为数字" tabindex="-1"><a class="header-anchor" href="#_2-3-字符串转换为数字" aria-hidden="true">#</a> 2.3 字符串转换为数字</h3><p>在 C 语言编程中，将数字字符串转换为数值是 C 编程中的常见任务，通常用于防止运行时错。</p><p>比如当期望用户输入的字符串代表一个数字时，用户可能不小心键入“<code>o</code>”而不是“<code>0</code>”（零）。</p><p><strong>stdlib.h</strong> 库包含以下函数，用于将字符串转换为数字：</p><ul><li><code>int atoi(str)</code> 代表 ASCII 转成整数。将 <code>str</code> 转换为等效的 <code>int</code> 值。如果第一个字符不是数字或未遇到任何数字，则返回 0。</li><li><code>double atof(str)</code> 表示 ASCII 转成浮点数。将<code>str</code>转换为等效的 <code>double</code> 值。如果第一个字符不是数字或未遇到数字，则返回 0.0。</li><li><code>long int atol(str)</code> 表示 ASCII 转成 <code>long int</code> 。将 <code>str</code> 转换为等效的长整数。如果第一个字符不是数字或未遇到任何数字，则返回 0。</li></ul><p>下面的程序演示了 <strong>atoi</strong>:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> input<span class="token punctuation">[</span><span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>


    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a number: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    num <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered %d&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意，<code>atoi()</code> 缺乏错误处理，如果你想确保进行适当的错误处理，建议使用 <code>strtol()</code>。</p></div><ul><li>填空，将字符串转换为整数：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> str_num<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">___</span> <span class="token punctuation">(</span>str_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-字符串数组" tabindex="-1"><a class="header-anchor" href="#_2-4-字符串数组" aria-hidden="true">#</a> 2.4 字符串数组</h3><p>二维数组可用于存储相关的字符串。</p><p>以下语句，该语句声明一个包含 3 个元素的数组，每个元素包含 15 个字符：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> trip<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;suitcase&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;passport&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;ticket&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然字符串的长度不同，但有必要声明一个<strong>足够大</strong>的尺寸来容纳最长的字符串。此外，访问这些元素会非常麻烦。</p><p>引用 <code>trip[0]</code> 表示“suitcase”容易出错。相反，您必须将 <code>[0][0]</code> 处的元素视为 “s”，将 <code>[2][3]</code> 处的元素视为 “k”，依此类推</p><p>处理字符串集合的一种更简单，更直观的方法是使用指针数组，如以下程序所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>trip<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;suitcase&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;passport&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;ticket&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Please bring the following:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> trip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为每个元素的长度都可以变化，所以与二维网格结构相比，字符串指针数组的结构更加参差不齐。</p><p>采用这种方法，字符串的长度没有限制。而且更重要的是，可以通过每个字符串的第一个字符的指针来引用。</p><p>请记住，像 <code>char *items[3];</code> 这样的声明只是为三个指针保留了空间。实际的字符串是由这些指针引用的。</p><ul><li>填空，声明字符串数组：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___  <span class="token operator">*</span>names ___ <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Jill&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Janet&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Jill&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Janet&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_3-函数指针" tabindex="-1"><a class="header-anchor" href="#_3-函数指针" aria-hidden="true">#</a> 3. 函数指针</h2><h3 id="_3-1-函数指针" tabindex="-1"><a class="header-anchor" href="#_3-1-函数指针" aria-hidden="true">#</a> 3.1 函数指针</h3><p>由于指针可以指向任何内存位置的地址，它们也可以指向可执行代码的入口。</p><p>指向函数的指针，指向了内存中某个函数的可执行代码入口。函数指针可以存储在一个数组中，或作为参数传递给其他函数。</p><p>一个函数指针的<strong>声明</strong>就像你对任何指针一样使用：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">return_type</span> <span class="token punctuation">(</span><span class="token operator">*</span>func_name<span class="token punctuation">)</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>(*func_name)</code> 周围的括号 <code>()</code> 很重要。没有它们，编译器会认为该函数返回的是一个指针。</p><p>在声明了<strong>函数指针</strong>后，你必须把它分配(即指向)给一个函数。</p><p>下面简短的程序声明了一个函数 <code>say_hello</code>，声明了一个函数指针 <code>funptr</code>，将该函数指针指向该函数，然后通过该指针调用函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token keyword">int</span> num_times<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 函数 */</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>funptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 函数 */</span>
    funptr <span class="token operator">=</span> say_hello<span class="token punctuation">;</span> <span class="token comment">/* 指针赋值 */</span>
    <span class="token function">funptr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 调用函数 */</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token keyword">int</span> num_times<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> k<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> num_times<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个函数名指向可执行代码的入口，就像一个数组名指向其第一个元素一样。</p><p>因此，尽管像 <code>funptr = &amp;say_hello</code> 和 <code>(*funptr)(3)</code> 这样的语句是正确的，但在函数指针赋值和函数调用中没有必要包括地址运算符 <code>&amp;</code> 和间接运算符 <code>*</code>。</p><ul><li>填空，声明一个函数 <code>sum</code>，该函数返回其参数之和，并声明一个指向 <code>sum</code> 的函数指针 <code>psum</code>:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a ___ b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token punctuation">(</span>___ psum<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> ___ <span class="token punctuation">)</span> <span class="token operator">=</span> ___<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><h3 id="_3-2-函数指针数组" tabindex="-1"><a class="header-anchor" href="#_3-2-函数指针数组" aria-hidden="true">#</a> 3.2 函数指针数组</h3><p>一个函数指针数组可以代替 <strong>switch</strong> 或 <strong>if</strong> 语句来选择分支，如下面的程序：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> choice<span class="token punctuation">,</span> result<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>op<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> add<span class="token punctuation">;</span>
    op<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> subtract<span class="token punctuation">;</span>
    op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> multiply<span class="token punctuation">;</span>
    op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> divide<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter two integers: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter 0 to add, 1 to subtract, 2 to multiply, or 3 to divide: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> op<span class="token punctuation">[</span>choice<span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n %d&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>填空，调用 <code>funcs</code> 数组指向的函数:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 假设 f1, f2, and f3 函数已被声明</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>funcs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ix <span class="token operator">&lt;</span> ___<span class="token punctuation">;</span> ix<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ___<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><h2 id="_4-空指针" tabindex="-1"><a class="header-anchor" href="#_4-空指针" aria-hidden="true">#</a> 4. 空指针</h2><h3 id="_4-1-空指针" tabindex="-1"><a class="header-anchor" href="#_4-1-空指针" aria-hidden="true">#</a> 4.1 空指针</h3><p>一个 <strong>void</strong> 空指针用来指向内存中的任何地址类型，它的声明看起来像：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的程序对三种不同的数据类型使用同一个指针。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">12.4</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment">// 空指针</span>
  
    ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;void ptr points to %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>y<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;void ptr points to %f\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;void ptr points to %c&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取消引用空指针时，必须先使用类型将指针转换为适当的数据类型，然后再使用 <code>*</code> 取消引用。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>你不能对无效指针进行指针运算。</p></div><ul><li>打印空 <code>ptr</code> 指针指向的变量 <code>num</code> 的值:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
___  <span class="token operator">*</span>ptr <span class="token operator">=</span>  <span class="token operator">&amp;</span>num<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>___<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><h3 id="_4-2-使用空指针的函数" tabindex="-1"><a class="header-anchor" href="#_4-2-使用空指针的函数" aria-hidden="true">#</a> 4.2 使用空指针的函数</h3><p>空指针通常用于函数声明。</p><p>例如:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">square</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>void *</code> 返回类型允许任何返回类型。同样，<code>void *</code> 的参数可以接受任何参数类型。</p><p>如果要使用参数传递的数据而不更改它，则将其声明为 <strong>const</strong>。</p><p>你可以省略参数名，以进一步使声明与其实现的隔离。通过这种方式声明一个函数，可以根据需要自定义，而不必更改声明。</p><p><strong>考虑下面的程序：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> sq_int<span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    sq_int <span class="token operator">=</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d squared is %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> sq_int<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> result<span class="token punctuation">;</span>

    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> num<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>square</code> 函数需要 <code>int</code> 类型，这就是为什么将 <code>num</code> void 指针强制转换为 <code>int</code> 的原因。</p><p>如果改变实现，允许 <code>square()</code> 乘以 <strong>float</strong>，那么只需要改变定义，而不需要改变声明。</p><ul><li>填空，声明一个接受并返回 void 指针的函数：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___  <span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">void</span> ___<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span>  <span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-函数指针作为参数" tabindex="-1"><a class="header-anchor" href="#_4-3-函数指针作为参数" aria-hidden="true">#</a> 4.3 函数指针作为参数</h3><p>使用函数指针的另一种方法是将其作为参数传递给另一个函数。</p><p>用作参数的函数指针有时称为<strong>回调函数</strong>，因为接收函数会“回调它”。</p><p><code>stdlib.h</code>头文件中的 <code>qsort()</code> 函数使用此技术。</p><p>quicksort是一种广泛用于对数组进行排序的算法。</p><p>要在程序中实现排序，只需包含 <code>stdlib.h</code> 文件，然后编写一个与 <code>qsort</code> 中使用的声明匹配的比较函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>base<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num<span class="token punctuation">,</span> <span class="token class-name">size_t</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>compare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来分解 <strong>qsort</strong> 声明：</p><ul><li><code>void *base</code> 指向要排序的数组的第一个元素的指针。</li><li><code>size_t num</code> 数组中的元素数量。</li><li><code>size_t width</code> 数组中每个元素的大小，以字节为单位。</li><li><code>int (*compare)(const void *, const void *)</code> 用来比较两个元素的函数，即函数指针（回调函数）。</li></ul><p><strong>回调函数</strong>： 回调函数就是一个通过函数指针调用的函数。如果把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，就说这是回调函数。</p><p><strong>compar 参数</strong>:</p><p><code>compar</code> 参数指向一个比较两个元素的函数。比较函数的原型应该像下面这样。注意两个形参必须是 <code>const void *</code> 型，同时在调用 <code>compar</code> 函数时，传入的实参也必须转换成 <code>const void *</code> 型。在 compar 函数内部会将 <code>const void *</code> 转换成实际类型。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">compar</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果 compar 返回值小于 0（&lt; 0），那么 p1 所指向元素会被排在 p2 所指向元素的前面；</li><li>如果 compar 返回值等于 0（= 0），那么p1所指向元素与 p2 所指向元素的顺序不确定；</li><li>如果 compar 返回值大于 0（&gt; 0），那么p1所指向元素会被排在 p2 所指向元素的后面。</li></ul><p>下面的程序使用 <strong>qsort</strong> 对一个 <strong>int</strong> 数组从低到高进行排序。</p>`,115),H=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdlib.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"compare"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(` 

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"52"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"23"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"56"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"19"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" num"),n("span",{class:"token punctuation"},","),s(" width"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},";"),s(`
  
    num `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"/"),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    width `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"qsort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("arr"),n("span",{class:"token punctuation"},","),s(" num"),n("span",{class:"token punctuation"},","),s(" width"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d "'),n("span",{class:"token punctuation"},","),s(" arr"),n("span",{class:"token punctuation"},"["),s(" i "),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"compare"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("elem1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("elem2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("elem1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("elem2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("elem1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("elem2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(` 
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>"),s("   "),n("span",{class:"token comment"},"// 包含标准输入输出库，为 printf 函数提供支持")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdlib.h>"),s("  "),n("span",{class:"token comment"},"// 包含标准库，为 qsort 函数提供支持")]),s(`

`),n("span",{class:"token comment"},"// 函数声明。此函数将用于 qsort 函数进行比较"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"compare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"52"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"23"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"56"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"19"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 定义并初始化一个含有 5 个整数的数组"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" num"),n("span",{class:"token punctuation"},","),s(" width"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},";"),s(`

    num `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 计算数组中的元素数量"),s(`
    width `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),s("arr"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("               "),n("span",{class:"token comment"},"// 计算单个数组元素的大小（在此处为 int 的大小）"),s(`

    `),n("span",{class:"token comment"},"// 使用 qsort 函数对数组进行排序"),s(`
    `),n("span",{class:"token comment"},"// arr 为数组的指针，num 为元素数量，width 为单个元素的大小，compare 为比较函数"),s(`
    `),n("span",{class:"token function"},"qsort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("arr"),n("span",{class:"token punctuation"},","),s(" num"),n("span",{class:"token punctuation"},","),s(" width"),n("span",{class:"token punctuation"},","),s(" compare"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 遍历并打印排序后的数组"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d "'),n("span",{class:"token punctuation"},","),s(" arr"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 主函数结束，返回 0"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 比较函数，用于确定两个元素的相对顺序"),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"compare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("elem1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},"*"),s("elem2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 转换为 int 指针并解引用，获取整数值"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("elem1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("elem2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 如果两数相等，返回 0"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("elem1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},")"),s("elem2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 如果第一个数小于第二个数，返回 -1"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token comment"},"// 如果第一个数大于第二个数，返回 1"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=a(`<p>我们在 qsort 调用中使用了函数名，因为函数名充当了指针。</p><h2 id="_5-小测验" tabindex="-1"><a class="header-anchor" href="#_5-小测验" aria-hidden="true">#</a> 5. 小测验</h2><ol><li>填空，声明两个字符串，并使用 <code>scanf()</code> 函数从输入中赋值：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___ str1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">___</span> <span class="token punctuation">(</span><span class="token string">&quot;%s ___ &quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span>
scanf
<span class="token operator">%</span>s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="2"><li>使用 <code>atoi</code> 函数将输入字符串并转换为数字。</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___ number<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">gets</span><span class="token punctuation">(</span>___<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">___</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> 
number
atoi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="3"><li>填空，声明一个函数，该函数返回其参数的平方，并使用函数指针进行调用：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sqr</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ___ n <span class="token operator">*</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span>___fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> sqr<span class="token punctuation">;</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">fp</span><span class="token punctuation">(</span>____<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">return</span>
<span class="token operator">*</span>
<span class="token number">42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="4"><li>填空，通过 void 指针将变量 <code>num</code> 的值增加三倍。</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">float</span> num <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
___ <span class="token operator">*</span>ptr <span class="token operator">=</span> ___ num<span class="token punctuation">;</span>
<span class="token function">___</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span> <span class="token operator">*=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span>
<span class="token operator">&amp;</span>
<span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="5"><li>填空，声明一个指向 <code>x1</code>，<code>x2</code> 和 <code>x3</code> 的空指针数组，并使用 <code>printf</code> 打印这些指针指向的值：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> x2 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> x3 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x2<span class="token punctuation">,</span> ___x3<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">___</span> <span class="token punctuation">(</span><span class="token string">&quot;%d %f %c&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>___<span class="token operator">*</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">___</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>___<span class="token operator">*</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',18),V={class:"hint-container info"},B=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),Y=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Linux、Web、Sql」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),Z=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),j={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,"方法二：微信：Jiabcdefh",-1),R=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function W($,D){const i=p("CodeTabs"),l=p("ExternalLinkIcon");return k(),v("div",null,[_,q,x,L,z,C,N,A,E,I,J,S,U,T,c(i,{id:"568",data:[{id:"code"},{id:"注释"}]},{title0:t(({value:e,isActive:o})=>[s("code")]),title1:t(({value:e,isActive:o})=>[s("注释")]),tab0:t(({value:e,isActive:o})=>[H]),tab1:t(({value:e,isActive:o})=>[P]),_:1}),Q,n("div",V,[B,Y,Z,n("p",null,[s("方法一："),n("a",j,[s("QQ"),c(l)])]),M]),R])}const K=d(w,[["render",W],["__file","04.html.vue"]]);export{K as default};
