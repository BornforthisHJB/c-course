import{_ as d,a as r}from"./zsxq-bfUTmhj4.js";import{_ as k}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as m,c as v,a as c,w as a,b as n,d as s,e as o}from"./app-kVup0cn9.js";const b={},g=o('<h2 id="_1-什么是-c-语言" tabindex="-1"><a class="header-anchor" href="#_1-什么是-c-语言" aria-hidden="true">#</a> 1. 什么是 C 语言</h2><p><strong>C</strong> 是一种通用的编程语言，已有近 50 年的历史。 <strong>C</strong> 可以编写从操作系统（包括 Windows 和其他许多系统）到复杂的程序，如 Python 解释器、Git、Oracle 数据库等。</p><p>C 的功能性是设计出来的。它是一种<strong>低级别</strong>的语言，与机器的工作方式密切相关，同时也易于学习。</p><blockquote><p>学习 C 语言，可以帮助大家更深入理解计算机底层的工作原理，如内存管理。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">C语言是？</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 通用编程语言</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 客户端脚本语言</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 图形编辑语言</label></li></ul></div><h2 id="_2-hello-world" tabindex="-1"><a class="header-anchor" href="#_2-hello-world" aria-hidden="true">#</a> 2. Hello World!</h2><p>如同学习任何新语言一样，让我们从经典的 &quot;Hello World！&quot;程序开始：</p>',7),h=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello, World!\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token comment"},'//#include "stdio.h"  // 导入头文件、预编译文件、别人做好的'),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`
`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token comment"},"//    body code"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello, GaoTianqi."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 输出"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 程序正常结束，返回 0"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=o(`<p>现在，分析下上面的代码：</p><ul><li><code>#include &lt;stdio.h&gt;</code> 引入头文件 <strong><code>stdio.h</code></strong>。为了使用 <strong>printf</strong> 函数，需要首先包括所需的文件，也称为<strong>头文件</strong>。</li><li><code>int main()</code> <strong>main</strong>() 函数是一个程序的执行入口。大括号<code>{ }</code>表示一个函数（也叫代码块）的开始和结束。大括号内的语句决定了该函数在执行时的作用。</li></ul><h3 id="_2-1-探究-c-include-的功能性" tabindex="-1"><a class="header-anchor" href="#_2-1-探究-c-include-的功能性" aria-hidden="true">#</a> 2.1 探究 c include 的功能性</h3><ol><li>首先，打开 Terminal。</li><li>使用 <code>cd</code> 命令来切换到你的源代码所在的目录。</li><li>使用 <code>clang</code> 命令来编译你的源代码。比如，如果你的源代码文件名是 <code>main.c</code>，你可以使用以下命令来编译：</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>clang <span class="token operator">-</span>E main<span class="token punctuation">.</span>c <span class="token operator">&gt;</span> test<span class="token punctuation">.</span>i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>-E</code> 参数会让 clang 只预处理源代码，并把结果输出到 <code>test.i</code> 文件中。</li></ul><p>如果你是想要编译 C++ 程序，你可以把 <code>clang</code> 改成 <code>clang++</code>，其他步骤是一样的。</p><blockquote><p>注意这只是预处理你的代码，并没有完成编译过程。如果你想要编译并执行你的代码，你需要更多的步骤。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">填空，引入头文件</p><p><code>#include &lt;___.h&gt;</code></p></div><h3 id="_2-2-printf-函数用来输出内容" tabindex="-1"><a class="header-anchor" href="#_2-2-printf-函数用来输出内容" aria-hidden="true">#</a> 2.2 <strong>printf</strong> 函数用来输出内容</h3>`,10),w=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 输出内容"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello, World!\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 返回 0，表示成功"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 输出内容"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello, World!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello, World!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 返回 0，表示成功"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ---output---"),s(`
Hello`),n("span",{class:"token punctuation"},","),s(" World"),n("span",{class:"token operator"},"!"),s("Hello"),n("span",{class:"token punctuation"},","),s(" World"),n("span",{class:"token operator"},"!"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 输出内容"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello, World!\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Hello, World!\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 返回 0，表示成功"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ---output---"),s(`
Hello`),n("span",{class:"token punctuation"},","),s(" World"),n("span",{class:"token operator"},"!"),s(`
Hello`),n("span",{class:"token punctuation"},","),s(" World"),n("span",{class:"token operator"},"!"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=o('<p>这里，我们把文本 &quot;Hello World!&quot;传给它。 转义字符<code>\\n</code>（<strong>escape sequence</strong>）输出一个换行符。转义字符总是以反斜线 <code>\\</code> 开始。</p><p>分号<code>;</code>表示语句的结束。每个语句<strong>必须</strong>以分号<code>;</code>结束。</p><p><code>return 0;</code> 语句则终止了 <code>main()</code> 函数，并返回数值0。数字0通常意味着我们的程序已经成功执行。任何其他数字都表示程序失败了。</p><h3 id="_2-3-练习" tabindex="-1"><a class="header-anchor" href="#_2-3-练习" aria-hidden="true">#</a> 2.3 练习</h3><p>打印文本&quot;Hi, everyone!&quot;</p><h2 id="_3-数据类型-data-type" tabindex="-1"><a class="header-anchor" href="#_3-数据类型-data-type" aria-hidden="true">#</a> 3. 数据类型 Data Type</h2><p>C 语言支持以下基本数据类型：</p><ol><li><strong>int</strong>: 整数，一个整数。</li><li><strong>float</strong>: 浮点数，一个带有小数部分的数字。</li><li><strong>double</strong>: 双精度浮点数。</li><li><strong>char</strong>: 单字符。</li></ol><p>每种类型所需的存储大小因平台而异。</p><p>C 语言有一个内置的 <strong>sizeof</strong> 操作符，可以返回特定数据类型的内存占用大小。 <strong>例如:</strong></p>',10),A=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"int: %ld \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"float: %ld \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"float"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"double: %ld \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"double"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"char: %ld \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 输出 int 类型的字节大小"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"int: %ld \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 输出 float 类型的字节大小"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"float: %ld \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"float"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 输出 double 类型的字节大小"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"double: %ld \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"double"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 输出 char 类型的字节大小"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"char: %ld \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"sizeof"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"char"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 1 byte = 8 bit"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=o(`<p>程序输出显示每种数据类型的相应大小（字节）。</p><p>本程序中的 <strong>printf</strong> 语句有两个<strong>参数</strong>：</p><ul><li>第1个参数是带有<strong>格式指定符</strong>（<code>%ld</code>）的字符串</li><li>第2个参数返回 <strong>sizeof</strong> 值。</li></ul><p>在最后的输出中，<code>%ld</code>（用于长十进制）被第 2 个参数中的值取代。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请注意，C 语言没有布尔类型。「较早的版本是没有的」</p><p>一个 <strong>printf</strong> 语句可以有多个格式指定符，并有相应的参数来替换指定符。</p><p>我们将在接下来的课程中学习更多关于格式指定符的知识。</p></div><p><strong>练习：</strong> 下面哪一项是 C 语言中的正确的变量类型？「C」</p><p>A. int, double, char, boolean</p><p>B. int, bool, string</p><p>C. int, float, double, char</p><p>D. int, float, string, char</p><h2 id="_4-变量-variable" tabindex="-1"><a class="header-anchor" href="#_4-变量-variable" aria-hidden="true">#</a> 4. 变量 Variable</h2><p>变量是内存中某块值的名称。</p><p>变量名（也称为<strong>标识符</strong>）必须以字母或下划线<code>_</code>开头，可以由字母、数字和下划线<code>_</code>字符组成。</p><p>不同语言中，变量的命名规则各不相同，但是使用小写字母和下划线来分隔单词是很常见的（snake_case）。</p><p>变量在使用前也必须声明为一种数据类型。</p><p>用<strong>赋值语句</strong>可以改变已声明的变量的值。 例如，下面的语句声明了一个整数变量 <code>my_var</code>，然后将其赋值为 42。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> my_var<span class="token punctuation">;</span>
my_var <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以在一条语句中同时声明和<strong>初始化</strong>变量的量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> my_var <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>snake_case</code> 是一种命名约定，通常用于编程语言中的变量、函数或其他标识符的命名。这种命名方式的特点是所有的单词都是小写，并且单词之间用下划线（<code>_</code>）来分隔。</p><p><code>snake_case</code> 得名于它的外观——单词之间的下划线看起来就像是蛇的弯曲身体。这种命名方式的优点是清晰易读，特别是对于由多个单词组成的名称。</p><p>以下是一些 <code>snake_case</code> 命名的例子：</p><ul><li><code>employee_name</code></li><li><code>total_amount</code></li><li><code>print_employee_details</code></li><li><code>calculate_average_score</code></li></ul><p>在一些编程语言和框架中，<code>snake_case</code> 是推荐或者必须的命名方式。例如，Python 和 Ruby 的社区通常推荐使用 <code>snake_case</code> 来命名变量和函数。在 SQL 语言中，<code>snake_case</code> 也是常见的命名方式。</p><p>然而，不同的编程语言、框架或项目可能会有不同的命名约定。在 JavaScript 或 Java 中，常见的命名方式是 <code>camelCase</code>，而在 C# 中，常见的命名方式是 <code>PascalCase</code>。选择哪种命名方式取决于你所使用的编程语言和项目的编码规范。</p><details class="hint-container details"><summary>Other</summary><p>在 C 语言中，变量声明的基本形式如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>type variable_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>type</code> 是变量的类型，<code>variable_name</code> 是变量名。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">;</span>       <span class="token comment">// 声明一个整型变量a</span>
<span class="token keyword">float</span> b<span class="token punctuation">;</span>     <span class="token comment">// 声明一个浮点型变量b</span>
<span class="token keyword">char</span> c<span class="token punctuation">;</span>      <span class="token comment">// 声明一个字符型变量c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以在声明的同时初始化变量：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 声明并初始化整型变量a为10</span>
<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token comment">// 声明并初始化浮点型变量b为3.14</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span>      <span class="token comment">// 声明并初始化字符型变量c为&#39;z&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想同时声明多个相同类型的变量，可以这样做：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>      <span class="token comment">// 声明多个整型变量a, b, c</span>
<span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>    <span class="token comment">// 声明多个浮点型变量x, y, z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于数组类型的变量，你可以这样声明：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 声明一个有10个元素的整型数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于指针类型的变量，你可以这样声明：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token comment">// 声明一个整型指针p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些只是最常见的例子，C 语言的变量类型还包括复合类型（如结构体和联合）、枚举类型等，它们的声明方式略有不同。总的来说，C 语言中变量的声明方法多种多样，可以根据你的需求选择合适的类型和声明方式。</p><hr><p>在 C 语言中，你可以在一行中声明多个变量，并为每个变量分别赋值。示例如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，我们声明了三个整型变量 <code>a</code>、<code>b</code> 和 <code>c</code>，并分别初始化它们的值为 10、20 和 30。</p><p>你也可以为多个数组元素同时赋值，例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，我们声明了一个包含三个元素的整型数组 <code>array</code>，并分别初始化数组元素的值为 10、20 和 30。</p><p>需要注意的是，所有变量的类型必须是一样的，即你不能在一行中声明不同类型的变量。例如，以下的代码是无效的：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>  <span class="token comment">// 错误！不可以在一行中声明不同类型的变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><p>让我们定义不同类型的变量，做一个简单的数学运算，并输出结果：</p>`,27),H=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},";"),s("               "),n("span",{class:"token comment"},"// 声明整型变量 a 和 b"),s(`
    `),n("span",{class:"token keyword"},"float"),s(" salary "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"56.23"),n("span",{class:"token punctuation"},";"),s("   "),n("span",{class:"token comment"},"// 声明浮点型变量 salary 并赋值为 56.23"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" letter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token char"},"'Z'"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// 声明字符型变量 letter 并赋值为 'Z'"),s(`
    a `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},";"),s("                  "),n("span",{class:"token comment"},"// 将变量 a 赋值为 8"),s(`
    b `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"34"),n("span",{class:"token punctuation"},";"),s("                 "),n("span",{class:"token comment"},"// 将变量 b 赋值为 34"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" c "),n("span",{class:"token operator"},"="),s(" a "),n("span",{class:"token operator"},"+"),s(" b"),n("span",{class:"token punctuation"},";"),s("            "),n("span",{class:"token comment"},"// 声明整型变量 c 并将 a 和 b 的和赋值给 c"),s(`

    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d \\n"'),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 打印变量 c 的值"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%f \\n"'),n("span",{class:"token punctuation"},","),s(" salary"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 打印变量 salary 的值"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%c \\n"'),n("span",{class:"token punctuation"},","),s(" letter"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 打印变量 letter 的值"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token comment"},"// type variable_name;"),s(`
`),n("span",{class:"token comment"},"// 方法一"),s(`
`),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},";"),s("       "),n("span",{class:"token comment"},"// 声明一个整型变量 a"),s(`
`),n("span",{class:"token keyword"},"float"),s(" b"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 声明一个浮点型变量 b"),s(`
`),n("span",{class:"token keyword"},"char"),s(" c"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// 声明一个字符型变量 c"),s(`

`),n("span",{class:"token comment"},"// 方法二"),s(`
`),n("span",{class:"token keyword"},"int"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),s("        "),n("span",{class:"token comment"},"// 声明并初始化整型变量 a 为 10"),s(`
`),n("span",{class:"token keyword"},"float"),s(" b "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3.14"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 声明并初始化浮点型变量 b 为 3.14"),s(`
`),n("span",{class:"token keyword"},"char"),s(" c "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token char"},"'z'"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// 声明并初始化字符型变量 c 为 'z'"),s(`

`),n("span",{class:"token comment"},"// 方法三"),s(`
`),n("span",{class:"token keyword"},"int"),s(" a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},";"),s("      "),n("span",{class:"token comment"},"// 声明多个整型变量 a, b, c"),s(`
`),n("span",{class:"token keyword"},"float"),s(" x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},","),s(" z"),n("span",{class:"token punctuation"},";"),s("    "),n("span",{class:"token comment"},"// 声明多个浮点型变量 x, y, z"),s(`

`),n("span",{class:"token comment"},"// 方法四"),s(`
`),n("span",{class:"token keyword"},"int"),s(" a "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(" b "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},","),s(" c "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=o(`<p>正如你所见，可以在一行中声明多个变量，用<strong>逗号</strong><code>,</code>分隔它们。</p><p>另外，注意对浮点数（<code>%f</code>）和字符（<code>%c</code>）输出使用不同的格式指定符。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>C 编程语言是<strong>大小写敏感</strong>的，所以 <code>my_Variable</code> 和 <code>my_variable</code> 是两个不同的标识。</p></div><p><strong>练习：</strong></p><p>填空，声明一个 int 类型变量 <code>num</code>，并赋值为 42。</p><h2 id="_5-常量-constant" tabindex="-1"><a class="header-anchor" href="#_5-常量-constant" aria-hidden="true">#</a> 5. 常量 Constant</h2><p>一个<strong>常量</strong>存储了一个不能改变值的变量(但必须初始化变量)。</p><p>通过使用有意义的常量名，代码会更易阅读和理解。 为了区分常量和变量，一个常见的做法是使用大写的标识符来声明常量。</p><p>定义常量的一种方法是在变量声明前使用 <strong>const</strong> 关键字。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// const 声明为常量并初始化值</span>
    <span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span> PI<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在程序执行期间，常量 <code>PI</code> 的值不能被改变。</p><p>例如，<code>PI=3.141</code>将产生一个错误。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>常量在声明时必须用一个值进行初始化，因为常量在创建出来之后，不能被修改。所以，一开始如果不赋值的话，在后面你就无法赋值了。</p></div><p>另一种定义常量的方法是使用 <code>#define</code> 预处理器指令。</p><p><code>#define</code> 指令使用宏来定义常量值。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span> PI<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>const &amp; define</summary><p><code>const</code> 和 <code>define</code> 在 C 语言中都可以用来定义常量，但是它们的工作方式有所不同，并且各有各的用途。以下是它们之间的一些主要区别：</p><ol><li><p><strong>预处理器和编译器</strong>：<code>define</code> 是预处理器指令，它在编译过程的预处理阶段进行替换，而 <code>const</code> 是编译器指令，它在编译阶段进行处理。</p></li><li><p><strong>作用域</strong>：<code>define</code> 不考虑作用域，只要在定义之后，都可以使用。而 <code>const</code> 具有作用域，只在定义它的作用域内有效。</p></li><li><p><strong>内存占用</strong>：<code>define</code> 定义的常量不会占用内存，因为它们在预处理阶段就被替换了。但是 <code>const</code> 定义的常量会占用内存，因为它们在运行时还存在。</p></li><li><p><strong>类型和检查</strong>：<code>define</code> 定义的常量没有类型，它只是简单的文本替换，编译器无法进行类型检查。但 <code>const</code> 定义的常量有类型，编译器会进行类型检查。</p></li></ol><p>现在我们来看一些代码示例：</p><p><strong>使用 <code>define</code></strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14159</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> radius <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> area <span class="token operator">=</span> PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Area: %f\\n&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>PI</code> 被定义为 3.14159，并在计算面积时使用。</p><p><strong>使用 <code>const</code></strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> radius <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> area <span class="token operator">=</span> pi <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Area: %f\\n&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个代码中，<code>pi</code> 是一个 <code>const</code> 常量，也被用来计算面积。注意，<code>pi</code> 有一个类型（<code>float</code>），并且只在 <code>main</code> 函数的作用域内有效。</p></details><p>在编译之前，预处理程序将代码中的每个宏标识符替换为指令中的相应值。在这种情况下，每个出现的 <strong>PI</strong> 都被替换为 <strong>3.14</strong>。 发送给编译器的最终代码将已经有了常量值。</p><p><code>const</code>和<code>#define</code>的区别在于，前者使用内存进行存储，而后者不使用。</p><h3 id="question-1" tabindex="-1"><a class="header-anchor" href="#question-1" aria-hidden="true">#</a> Question 1</h3><p><strong>在具体使用的时候我们应该如何选择？选择依据是什么？</strong></p><p>选择 <code>const</code> 或者 <code>define</code> 的决定依赖于具体的应用场景和你的需求。以下是一些考虑的因素：</p><ol><li><p><strong>类型检查</strong>：如果你需要编译器进行类型检查，你应该选择 <code>const</code>，因为 <code>define</code> 不提供类型检查。如果你试图使用一个与定义的类型不同的值，使用 <code>const</code> 的代码会在编译时报错。</p></li><li><p><strong>作用域</strong>：如果你希望常量只在特定的作用域内有效，你应该使用 <code>const</code>，因为它会考虑作用域。<code>define</code> 定义的宏在定义后的所有地方都是有效的。</p></li><li><p><strong>性能</strong>：由于 <code>define</code> 在预处理阶段就进行了文本替换，所以它不会占用内存，这可能会有一些性能优势。然而，这个优势通常很小，并且在现代计算机上可能无法察觉。</p></li><li><p><strong>编程风格</strong>：在一些编程风格中，例如 C++，推荐使用 <code>const</code> 而不是 <code>define</code>，因为 <code>const</code> 提供了更多的类型安全性和更好的集成到语言中。</p></li></ol><p>总的来说，两者都可以用来定义常量，但它们的适用场合并不完全相同。如果你需要更多的类型安全性或更细的作用域控制，使用 <code>const</code> 会更好。而如果你正在定义一个需要在多个文件或整个项目中使用的常量，<code>define</code> 可能是一个更好的选择。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不要在<code>#define</code>语句的结尾处放一个分号<code>;</code>。这是一个常见的错误。</p><p>我们将在接下来的模块中学习更多关于<strong>预处理器指令</strong>的知识。</p></div><h2 id="_6-输入及输出" tabindex="-1"><a class="header-anchor" href="#_6-输入及输出" aria-hidden="true">#</a> 6. 输入及输出</h2><h3 id="_6-1-输入-input" tabindex="-1"><a class="header-anchor" href="#_6-1-输入-input" aria-hidden="true">#</a> 6.1 输入 Input</h3><p>C 支持多种方式获取用户输入。 如 <code>getchar()</code> 获取一个单字符的输入。</p><p><strong>比如</strong>:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取单个输入字符</span>
    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: %c&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入字符存储在变量 <strong>a</strong> 中。</p><p><code>gets()</code> 函数用于读取输入的字符序列，也称为<strong>字符串</strong>。 一个字符串被存储在一个 <strong>char 数组</strong>中。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取字符串</span>
    <span class="token function">gets</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: %s&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们将输入的内容存储在一个大小100字符的数组中。</p><p><code>scanf()</code> 扫描符合格式指定符的输入。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: %d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量名前的 <code>&amp;</code> 符号是<strong>地址运算符</strong>。它给出了一个变量的地址，或在内存中的位置。这样做是因为 <strong>scanf</strong> 将一个输入值放在一个变量地址上。</p><ol><li>scanf：获取用户输入</li><li>%d：指定用户输入的数据类型；</li><li>上面得到用户输入的值，存储在 a 变量中。但是，想要存储在 a 变量中，我们需要知道 a 的家庭住址「在这里，也就是 a 变量的物理地址」</li></ol><p>想要获取用户输入的字符串，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> inputString<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一串字符：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: %s&quot;</span><span class="token punctuation">,</span> inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="question-2" tabindex="-1"><a class="header-anchor" href="#question-2" aria-hidden="true">#</a> Question 2</h3><p><strong>scanf(&quot;%s&quot;, inputString);为什么不需要 &amp;？</strong></p><p>在 C 语言中，当你需要使用 <code>scanf()</code> 函数读取一个整型、浮点型等基本数据类型的值时，你需要在变量名前添加 <code>&amp;</code> 操作符，这是因为 <code>scanf()</code> 函数需要知道这个变量的内存地址，以便将用户的输入值存储在那里。这就是 <code>&amp;</code> 操作符的作用——获取变量的内存地址。</p><p>然而，当你使用 <code>scanf()</code> 函数读取字符串时，情况就不同了。在 C 语言中，字符串其实是字符数组，而数组名本身就是一个指向数组首元素的指针，也就是说，它已经是一个地址了。因此，当你使用 <code>scanf()</code> 函数读取字符串时，你只需要直接传入数组名（即字符串名），而无需在前面添加 <code>&amp;</code> 操作符。</p><p>所以，当你写 <code>scanf(&quot;%s&quot;, inputString);</code> 时，你实际上是在告诉 <code>scanf()</code> 函数：“请将输入的字符串存储在名为 <code>inputString</code> 的字符数组的起始位置（即 <code>inputString</code> 的地址）”。这也是为什么你不需要添加 <code>&amp;</code> 操作符的原因。</p><p><strong>练习：</strong> 输入两个整数并输出它们的和。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter two numbers:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nSum: %d&quot;</span><span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>scanf()</code>一旦遇到空格就会停止读取，所以像 &quot;Hello World &quot;这样的文本对<code>scanf()</code>来说是两个独立的输入。</p></div><h3 id="_6-2-探究-scanf-获取字符串的特性" tabindex="-1"><a class="header-anchor" href="#_6-2-探究-scanf-获取字符串的特性" aria-hidden="true">#</a> 6.2 探究 scanf 获取字符串的特性</h3><p>首先，我们需要明白 <code>scanf()</code> 是如何工作的。<code>scanf()</code> 是一个用于读取用户输入的函数。它通常和特定的格式说明符一起使用，例如：</p><ul><li><code>%s</code>（对应字符串）</li><li><code>%d</code>（对应整数）</li><li><code>%f</code>（对应浮点数）等等。</li></ul><p>这些说明符告诉 <code>scanf()</code> 我们期待输入的数据类型。</p><p>特别地，当我们用 <code>%s</code> 格式说明符与 <code>scanf()</code> 一起使用时，它会读取连续的字符，直到遇到一个&quot;空白&quot;字符（比如空格、制表符或换行符）。因此，如果我们试图使用 <code>scanf()</code> 读取&quot;Hello World&quot;这样的带空格的字符串，那么 <code>scanf()</code> 只会读取&quot;Hello&quot;，因为空格就在这之后。</p><p>这是一个代码示例，以及运行它的结果：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你输入的字符串是: %s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在提示下输入&quot;Hello World&quot;，输出将会是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>请输入一个字符串: Hello World
你输入的字符串是: Hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想读取含有空格的字符串，你应该使用<code>fgets()</code>函数，它可以读取整行（包括空格），直到遇到换行符或者达到给定的最大字符数。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从标准输入（stdin）读取最多20个字符</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你输入的字符串是: %s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，如果你在提示下输入&quot;Hello World&quot;，输出将会是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>请输入一个字符串: Hello World
你输入的字符串是: Hello World
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>fgets()</code>会读取换行符（如果在给定字符限制内），因此在输出中可能会包含换行符。如果你想移除这个换行符，你可以编写额外的代码来处理这个问题。</p><details class="hint-container details"><summary>stdin 20个限制不能改么？</summary><p><code>fgets()</code> 函数的第二个参数并不是限制 <code>stdin</code> 的输入，而是你定义的缓冲区大小。这个参数应当等于你的字符数组的大小。如果你的数组大小为 20，那么 <code>fgets()</code> 函数将最多读取 19 个字符和一个 <code>\\0</code> 结束符。这是因为在C语言中，字符串是以 <code>\\0</code> 字符结束的。</p><p>这就意味着如果你想读取更长的字符串，你应该定义一个更大的字符数组。例如，如果你想读取最多200个字符，你可以这样做：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个字符串: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你输入的字符串是: %s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序将允许用户输入最多199个字符（因为还需要一个字符空间来存放<code>\\0</code>结束符）。如果用户输入超过199个字符，<code>fgets()</code>函数将只读取前199个字符。</p></details>`,64),I={class:"hint-container details"},S=n("summary",null,"fgets 中如果缓冲区的数字大于数组中的数字会怎么样？",-1),Y=n("p",null,[s("如果在 "),n("code",null,"fgets()"),s(" 函数中，你指定的缓冲区大小大于你实际定义的字符数组大小，那么可能会导致缓冲区溢出。这是一种非常危险的情况，因为它可能会覆盖掉你的程序其他部分的数据，或者导致程序崩溃。")],-1),T=n("p",null,[s("例如，假设你有一个只能存储 10 个字符的数组，但是你试图从 "),n("code",null,"stdin"),s(" 中读取 100 个字符：")],-1),E=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" str"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"请输入一个字符串: "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"fgets"),n("span",{class:"token punctuation"},"("),s("str"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"100"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"stdin"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 这里定义的缓冲区大小比数组的大小大，可能会导致缓冲区溢出"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"你输入的字符串是: %s\\n"'),n("span",{class:"token punctuation"},","),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("p",null,[s("这段代码是有问题的，因为当用户输入的字符串长度超过数组的长度时，"),n("code",null,"fgets()"),s(" 将会写入超过数组长度的数据，可能会破坏内存中的其他数据，导致未定义的行为。这可能会引发安全问题，因此必须避免。")],-1),Q=n("p",null,[s("总的来说，你总是需要确保你为 "),n("code",null,"fgets()"),s(" 提供的缓冲区大小不超过你的字符数组的实际大小，以防止缓冲区溢出。")],-1),V=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" str1"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" str2"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"important"'),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"str1: %s\\n"'),n("span",{class:"token punctuation"},","),s(" str1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"str2: %s\\n"'),n("span",{class:"token punctuation"},","),s(" str2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"请输入一个字符串: "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"fgets"),n("span",{class:"token punctuation"},"("),s("str1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"stdin"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 这里故意使得缓冲区大小大于数组大小"),s(`

    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"str1: %s\\n"'),n("span",{class:"token punctuation"},","),s(" str1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"str2: %s\\n"'),n("span",{class:"token punctuation"},","),s(" str2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("p",null,"但并不是百分百能正确运行出来，现在计算机都有内存溢出保护的机制。",-1),J=o(`<p><strong>填空，读取单个字符，并存储在字符变量<code>c</code>中。</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">___</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="hint-container details"><summary>答案</summary><p><code>getchar</code></p></details><h3 id="_6-3-scanf-是否需要-速查表" tabindex="-1"><a class="header-anchor" href="#_6-3-scanf-是否需要-速查表" aria-hidden="true">#</a> 6.3 scanf 是否需要 &amp; 速查表</h3><p>在 C 语言中，当使用 <code>scanf</code> 函数来获取用户输入时，我们经常需要使用取址符( &amp; )来指定我们想要存放数据的变量的地址。这样，<code>scanf</code> 可以直接修改该内存位置的值。以下是一个基于数据类型的简单表格，显示了哪些类型需要取址符以及哪些不需要：</p><table><thead><tr><th>数据类型</th><th>是否需要取址符 (&amp;)</th><th>示例</th></tr></thead><tbody><tr><td><code>int</code></td><td>需要</td><td><code>scanf(&quot;%d&quot;, &amp;num);</code></td></tr><tr><td><code>float</code></td><td>需要</td><td><code>scanf(&quot;%f&quot;, &amp;f);</code></td></tr><tr><td><code>double</code></td><td>需要</td><td><code>scanf(&quot;%lf&quot;, &amp;d);</code></td></tr><tr><td><code>char</code></td><td>需要</td><td><code>scanf(&quot; %c&quot;, &amp;c);</code></td></tr><tr><td><code>long</code></td><td>需要</td><td><code>scanf(&quot;%ld&quot;, &amp;l);</code></td></tr><tr><td><code>short</code></td><td>需要</td><td><code>scanf(&quot;%hd&quot;, &amp;s);</code></td></tr><tr><td><code>long long</code></td><td>需要</td><td><code>scanf(&quot;%lld&quot;, &amp;ll);</code></td></tr><tr><td><code>unsigned int</code></td><td>需要</td><td><code>scanf(&quot;%u&quot;, &amp;unum);</code></td></tr><tr><td><code>char[]</code> (字符串数组)</td><td>不需要</td><td><code>scanf(&quot;%s&quot;, str);</code></td></tr><tr><td><code>char*</code> (字符指针)</td><td>不需要</td><td><code>scanf(&quot;%s&quot;, strPtr);</code></td></tr></tbody></table><p><strong>注意</strong>:</p><ol><li>字符串 (<code>char[]</code>或<code>char*</code>) 在使用 <code>scanf</code> 时不需要取址符，因为数组名或字符指针本身就代表一个地址。</li><li>当读取 <code>char</code> 类型时，通常在格式字符串中放置一个空格（如<code>&quot; %c&quot;</code>），以跳过可能存在的换行符或空格。</li><li>在实际使用中，应确保为 <code>scanf</code> 提供足够大小的缓冲区以避免溢出，特别是当读取字符串时。</li><li>使用 <code>scanf</code> 读取其他复杂数据结构或自定义数据类型时，通常也需要使用取址符。</li></ol><p>总的来说，基本的数据类型（如<code>int</code>，<code>float</code>，<code>char</code>等）在使用<code>scanf</code>时都需要取址符。但字符串和指针不需要取址符，因为它们本身就是地址。</p><h3 id="_6-4-输出-output" tabindex="-1"><a class="header-anchor" href="#_6-4-输出-output" aria-hidden="true">#</a> 6.4 输出 Output</h3><p>在前面的小节中，我们已经使用了 <code>printf()</code> 函数来输出内容。在本小节中，我们将介绍其他几个同于<strong>输出</strong>的函数。关于 printf 函数，我后面会专门讲一下。</p><p><code>putchar()</code> 输出单一字符。 <strong>比如:</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入存储在变量 <strong>a</strong> 中，并用 <code>putchar(a)</code> 输出字符变量 <code>a</code>。</p><p><code>puts()</code>函数用于将输出一个<strong>字符串</strong>。 一个字符串存储在一个 char 数组中。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">gets</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们将输入的内容存储在 100 个字符的数组中，并用 <code>puts()</code> 来输出该字符串。</p><p><code>scanf()</code> 扫描符合格式指定符的输入。</p><p><strong>例如:</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;You entered: %d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量名前的 <code>&amp;</code> 符号是<strong>地址运算符</strong>。它给出了一个变量的地址，或在内存中的位置。需要这样做是因为 <strong>scanf</strong> 将一个输入值放在一个变量地址上</p><p>作为另一个例子，让我们输入整数并输出它们的总和：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter two numbers:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nSum: %d&quot;</span><span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>填空，输出单字符变量<code>c</code>。</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;s&#39;</span><span class="token punctuation">;</span>
<span class="token function">___</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-printf-函数" tabindex="-1"><a class="header-anchor" href="#_6-5-printf-函数" aria-hidden="true">#</a> 6.5 printf 函数</h3><p>C 语言中，输出内容到屏幕的基本函数是 <code>printf()</code> 函数，该函数声明在 <code>stdio.h</code> 头文件中。</p><p>在第一个&quot;Hello World&quot;程序中引入了 <strong>printf</strong> 函数。对这个函数的调用需要一个<strong>格式字符串</strong>，其中可以包括用于输出特殊字符的<strong>转义字符</strong>和由值替换的<strong>格式指定符</strong>。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The tree has %d apples.\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* output: The tree has 22 apples. */</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;Hello World!\\&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* output: &quot;Hello World!&quot; */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们来学习如何使用它。</p><h4 id="_6-5-1-printf-函数基本使用" tabindex="-1"><a class="header-anchor" href="#_6-5-1-printf-函数基本使用" aria-hidden="true">#</a> 6.5.1 printf() 函数基本使用</h4><p>首先，我们从最基础的 <code>printf()</code> 函数开始。下面是一个最简单的 C 程序，该程序使用 <code>printf()</code> 函数向控制台打印出一段文字。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>  <span class="token comment">// 引入stdio.h头文件，这个头文件中声明了printf()函数</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// main函数是C程序的入口</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用printf函数打印一段文字到控制台</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// main函数结束，返回0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-5-2-printf-函数中的转义序列" tabindex="-1"><a class="header-anchor" href="#_6-5-2-printf-函数中的转义序列" aria-hidden="true">#</a> 6.5.2 printf() 函数中的转义序列</h4><p>有一些特殊的字符，我们不能直接在 <code>printf()</code> 函数中打印出来，例如换行符、制表符等。</p><p>转义字符以<strong>反斜线</strong><code>\\</code>开始。</p><p>这时候，我们需要用到转义序列。下面是一些常用的转义序列：</p><ul><li><code>\\n</code>：换行符，打印完这个字符后，光标会移动到下一行的开始位置。</li><li><code>\\t</code>：制表符，打印完这个字符后，光标会移动到下一个制表位置。</li><li><code>\\\\</code>：反斜杠，用来打印一个<code>\\</code>字符。</li><li><code>\\&quot;</code>：双引号，用来打印一个<code>&quot;</code>字符。</li><li><code>\\b</code>：退格</li><li><code>\\&#39;</code>：单引号</li><li><code>\\&quot;</code>：双引号</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,\\nWorld!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用\\n来打印换行</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,\\tWorld!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用\\t来打印制表符</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,\\\\World!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用\\\\来打印反斜杠</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,\\&quot;World!\\&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用\\&quot;来打印双引号</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-5-3-printf-函数中的格式化输出" tabindex="-1"><a class="header-anchor" href="#_6-5-3-printf-函数中的格式化输出" aria-hidden="true">#</a> 6.5.3 printf() 函数中的格式化输出</h4><p>在 <code>printf()</code> 函数中，我们还可以进行格式化输出，这就涉及到了格式控制符。</p><p>格式指定符以<strong>百分号</strong><code>%</code>开始，并由格式字符串后的相应参数取代。一个格式指定符可以包括几个选项，以及一个转换字符：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">]</span><span class="token punctuation">[</span>width<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>precision<span class="token punctuation">]</span>conversion character 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可选的 <code>-</code> 指定了字符串中数据的左对齐；「没有 - 的，是右对齐」</li><li>可选的 <code>width</code> (宽度)提供了数据的最小字符数；</li><li>其中<code>.</code>将宽度 <code>width</code> 与精度 <code>precision</code> 分开；</li></ul><blockquote><p>可选的 <code>precision</code> (精度)给出了数字的小数位数。如果使用 <strong>s</strong> 作为转换字符，那么精度决定了要打印的字符数。</p></blockquote><p>如有必要，转换字符将参数<code>conversion character</code>转换为指定类型，下面是一些常用的格式控制符：</p><ul><li><code>%d</code>：整型数据（十进制）</li><li><code>%c</code>：字符</li><li><code>%s</code>：字符串</li><li><code>%f</code>：浮点数</li><li><code>%e</code>：科学记数法</li><li><code>%x</code>： 十六进制</li></ul>`,48),L=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" c "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token char"},"'A'"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" s"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Hello, World!"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"float"),s(" f "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3.14"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d\\n"'),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 打印整型变量i"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%c\\n"'),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 打印字符变量c"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%s\\n"'),n("span",{class:"token punctuation"},","),s(" s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 打印字符串s"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%.2f\\n"'),n("span",{class:"token punctuation"},","),s(" f"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 打印浮点数f，保留2位小数"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Color: %s, Number: %d, float: %5.2f \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"red"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"42"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3.14159"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/* Color: red, Number: 42, float:  3.14  */"),s(`

    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Pi = %3.2f \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3.14159"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(` 
    `),n("span",{class:"token comment"},"/* Pi = 3.14 */"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Pi = %8.5f \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3.14159"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(` 
    `),n("span",{class:"token comment"},"/* Pi = 3.14159 */"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Pi = %-8.5f \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3.14159"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(` 
    `),n("span",{class:"token comment"},"/* Pi = 3.14159 */"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"There are %d %s in the tree. \\n"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"apples"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/* There are 22 apples in the tree. */"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=o(`<blockquote><p>要打印<code>%</code>符号，在格式字符串中使用<code>%%</code>。</p></blockquote><p>这就是 C 语言中使用 <code>printf()</code> 函数进行输出的基本方法，通过 <code>printf()</code> 函数和格式控制符，我们可以将各种类型的数据按照我们想要的格式打印到控制台。</p><p><strong>练习：</strong></p><p>填空，格式化输出数字<code>4.42</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%3.___f&quot;</span><span class="token punctuation">,</span> <span class="token number">4.4289743</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="hint-container details"><summary>字符串格式控制符</summary><p>C语言中的 <code>printf</code> 函数支持多种格式控制符来打印各种数据类型。以下是最常用的格式控制符列表：</p><table><thead><tr><th>控制符</th><th>描述</th></tr></thead><tbody><tr><td><code>%d</code></td><td>以十进制形式输出带符号整数</td></tr><tr><td><code>%i</code></td><td>以十进制形式输出带符号整数（与 <code>%d</code> 相同）</td></tr><tr><td><code>%u</code></td><td>以十进制形式输出无符号整数</td></tr><tr><td><code>%f</code></td><td>输出单精度浮点数</td></tr><tr><td><code>%lf</code></td><td>输出双精度浮点数</td></tr><tr><td><code>%e</code></td><td>使用科学计数法格式输出单精度浮点数</td></tr><tr><td><code>%E</code></td><td>使用科学计数法格式输出单精度浮点数（使用大写的 <code>E</code>）</td></tr><tr><td><code>%g</code></td><td>对于 <code>%f</code> 和 <code>%e</code>，输出长度较短的一种</td></tr><tr><td><code>%G</code></td><td>对于 <code>%f</code> 和 <code>%E</code>，输出长度较短的一种</td></tr><tr><td><code>%x</code></td><td>以十六进制形式输出无符号整数（小写字母）</td></tr><tr><td><code>%X</code></td><td>以十六进制形式输出无符号整数（大写字母）</td></tr><tr><td><code>%o</code></td><td>以八进制形式输出无符号整数</td></tr><tr><td><code>%s</code></td><td>输出一个字符串</td></tr><tr><td><code>%c</code></td><td>输出一个字符</td></tr><tr><td><code>%p</code></td><td>输出指针的值</td></tr><tr><td><code>%n</code></td><td>将到目前为止输出的字符数存入整数指针参数所指的位置</td></tr><tr><td><code>%%</code></td><td>输出 <code>%</code> 符号</td></tr></tbody></table><p>这些控制符可以与标志、宽度、精度和长度修饰符结合使用，以控制输出的格式。例如，<code>%6.2f</code> 表示输出的浮点数至少有6个字符宽，且小数点后有两位数字。</p><p>长度修饰符可以与某些格式控制符结合，以表示特定的大小或者长度的变量类型，例如：</p><table><thead><tr><th>长度修饰符</th><th>描述</th></tr></thead><tbody><tr><td><code>hh</code></td><td>与整数格式控制符一起使用，表示 <code>signed char</code> 或 <code>unsigned char</code></td></tr><tr><td><code>h</code></td><td>与整数格式控制符一起使用，表示 <code>short int</code></td></tr><tr><td><code>l</code></td><td>与整数格式控制符一起使用，表示 <code>long int</code>；与 <code>%f</code>, <code>%e</code>, <code>%g</code> 一起使用表示 <code>double</code></td></tr><tr><td><code>ll</code></td><td>与整数格式控制符一起使用，表示 <code>long long int</code></td></tr><tr><td><code>L</code></td><td>与 <code>%f</code>, <code>%e</code>, <code>%g</code> 一起使用，表示 <code>long double</code></td></tr><tr><td><code>j</code></td><td>与整数格式控制符一起使用，表示 <code>intmax_t</code> 或 <code>uintmax_t</code></td></tr><tr><td><code>z</code></td><td>与整数格式控制符一起使用，表示 <code>size_t</code></td></tr><tr><td><code>t</code></td><td>与整数格式控制符一起使用，表示 <code>ptrdiff_t</code></td></tr></tbody></table><p>请注意，支持的长度修饰符可能会根据不同的编译器和平台而有所不同。</p></details><h3 id="_6-6-格式化输入" tabindex="-1"><a class="header-anchor" href="#_6-6-格式化输入" aria-hidden="true">#</a> 6.6 格式化输入</h3><p><code>scanf()</code> 函数用于将输入分配给变量。对这个函数的调用是根据格式指定符扫描输入，在必要时转换输入。</p><p>如果输入不能被转换，那么就不进行赋值。 <code>scanf()</code> 语句会等待输入，然后进行赋值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    <span class="token keyword">float</span> num<span class="token punctuation">;</span>
    <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %f %s&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入 <code>10 22.5 abcd</code>，然后按回车键，将 <code>10</code> 分配给 <code>x</code>，<code>22.5</code> 分配给 <code>num</code>，<code>abcd</code> 分配给 text。</p><p>注意，必须使用 <code>&amp;</code> 来访问变量地址。字符串不需要 <code>&amp;</code>，因为字符串的名字就像<strong>一个指针</strong>。</p><p>格式指定符以百分号 <code>%</code> 开始，用于为控制字符串后的相应参数赋值。<strong>空白、制表符和换行符被忽略</strong>。</p><p>一个格式指定符可以包括几个选项和一个转换字符:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token punctuation">[</span>max_field<span class="token punctuation">]</span>conversion character
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可选的 <code>*</code> 将跳过输入字段。</li><li>可选的 <code>max_width</code> 指定了输入字段的最大字符数。</li></ul><p>如有必要，转换字符将参数 <code>conversion character</code> 转换为指定的类型，如：</p><ul><li><strong>d</strong> - 十进制</li><li><strong>c</strong> - 字符</li><li><strong>s</strong> - 字符串</li><li><strong>f</strong> - 浮点数</li><li><strong>x</strong> - 十六进制</li></ul><p><strong>例如：</strong></p>`,19),j=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" text"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%2d %d %*f %5s"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("x"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("y"),n("span",{class:"token punctuation"},","),s(" text"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/* input: 1234  5.7  elephant */"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d  %d  %s"'),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},","),s(" text"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/* output: 12  34  eleph */"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(` 
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" i"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Please enter an integer: "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// %d用于读取整数"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You entered: %d\\n"'),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// %d用于打印整数"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Z=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" c"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Please enter a character: "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'" %c"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 注意前面有一个空格，这是为了清除可能存在的换行符"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You entered: %c\\n"'),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" str"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Please enter a string (up to 9 characters): "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%9s"'),n("span",{class:"token punctuation"},","),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 只读取前9个字符"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You entered: %s\\n"'),n("span",{class:"token punctuation"},","),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),X=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"float"),s(" f"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Please enter a float: "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%f"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("f"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You entered: %f\\n"'),n("span",{class:"token punctuation"},","),s(" f"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" i"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Please enter a hexadecimal integer: "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%x"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You entered: %x\\n"'),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 打印为十六进制"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"In decimal: %d\\n"'),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 打印为十进制"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),K=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" i"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" str"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Please enter an integer and a string (up to 9 characters): "'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%*d %9s"'),n("span",{class:"token punctuation"},","),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 读取整数但忽略它，只保存字符串"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"You entered: %s\\n"'),n("span",{class:"token punctuation"},","),s(" str"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=o('<p>每个程序都从读取用户输入开始，然后打印出用户输入的值。在这些例子中，<code>&#39;%&#39;</code> 后面的字符定义了输入或输出值的类型，而 <code>&#39;&amp;&#39;</code> 用于获取变量的地址，以便 scanf 可以将读取的值存储在正确的位置。</p><p><strong>详细解释上面的 demo 代码：</strong></p><p>这个程序首先从用户输入获取数据，然后将数据赋值给指定的变量，最后打印这些变量的值。</p><p>以下是具体步骤的解释：</p><ol><li><p>程序首先调用 scanf 函数从用户输入读取数据。格式字符串 <code>&quot;%2d %d %*f %5s&quot;</code> 定义了需要读取的数据类型和格式。这个字符串表示：</p><ul><li>读取一个最多两位的十进制整数并存储到变量 x 中（对应 <code>&quot;%2d&quot;</code> ）</li><li>然后跳过一个或多个空格（对应 <code>&quot; &quot;</code>）</li><li>再读取一个十进制整数并存储到变量 y 中（对应 <code>&quot;%d&quot;</code>）</li><li>然后跳过一个或多个空格（对应 <code>&quot; &quot;</code>）</li><li>然后读取一个浮点数，但是忽略它不保存（对应 <code>&quot;%*f&quot;</code>）</li><li>然后跳过一个或多个空格（对应 <code>&quot; &quot;</code>）</li><li>最后读取一个最多五个字符的字符串并存储到 text 数组中（对应 <code>&quot;%5s&quot;</code>）。</li></ul></li><li><p>用户输入的数据是 <code>&quot;1234 5.7 elephant&quot;</code>，按照上面的规则，程序将：</p><ul><li>读取 <code>&quot;12&quot;</code> 作为第一个整数（因为只读取两位），并将其存储到 x 中，所以 x 的值为 12</li><li>然后读取 <code>&quot;34&quot;</code> 作为第二个整数，并将其存储到 y 中，所以 y 的值为 34</li><li>然后读取 <code>&quot;5.7&quot;</code> 作为浮点数，但是忽略它不保存</li><li>最后读取 <code>&quot;eleph&quot;</code> 作为字符串（因为只读取五个字符），并将其存储到 text 中，所以 text 的值为 <code>&quot;eleph&quot;</code>。</li></ul></li><li><p>然后，程序使用 printf 函数打印变量 x、y 和 text 的值。输出结果是 <code>&quot;12 34 eleph&quot;</code>，这与我们前面解释的结果一致。</p></li></ol><div class="hint-container info"><p class="hint-container-title">为什么第二个 %d 是读取前面的整数剩余的？</p><p>这是因为 <code>scanf</code> 函数的工作方式。<code>scanf</code> 会从左到右读取输入，然后根据格式字符串来解析这个输入。当 <code>scanf</code> 遇到一个空格或者换行符时，它会停止读取当前的字段，然后跳到下一个字段。</p><p>在你给出的代码中，格式字符串是 <code>&quot;%2d %d %*f %5s&quot;</code>。第一个 <code>%2d</code> 让 <code>scanf</code> 读取一个最多两位的十进制整数。因此，当用户输入 &quot;1234&quot; 时，<code>scanf</code> 只会读取前两位，即 &quot;12&quot;，并将它存储在变量 <code>x</code> 中。</p><p>然后 <code>scanf</code> 遇到了空格，它知道第一个字段（也就是前两位数）已经结束，所以它跳到下一个字段。下一个字段是 <code>%d</code>，这表示 <code>scanf</code> 应该读取一个十进制整数。因此，<code>scanf</code> 会继续从用户输入中读取，从刚才停止的地方开始，也就是 &quot;34&quot;，并将它存储在变量 <code>y</code> 中。</p><p>这就是为什么第二个 <code>%d</code> 会读取前面的整数剩余的部分。如果你想让每个 <code>%d</code> 都只读取两位，你可以将格式字符串改为 <code>&quot;%2d %2d %*f %5s&quot;</code>，这样 <code>scanf</code> 就会在读取每个整数的两位之后停止。</p></div><p>所以，scanf 其实就是一个“流”。</p><p>例如：</p>',8),U=n("p",null,"scanf 获取用户输入，比如现在用户输入 11gtq aiyc 123",-1),$=n("p",null,[s("那么我们现在有一个字符串了："),n("code",null,"11gtq aiyc 123")],-1),nn=n("ol",null,[n("li",null,[s("此时我们有匹配的格式："),n("code",null,"%d %s"),s("，那么对应的匹配结果为：")])],-1),sn=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"符号"),n("th",null,"内容")])]),n("tbody",null,[n("tr",null,[n("td",null,"%d"),n("td")]),n("tr",null,[n("td",null,"%s"),n("td")])])],-1),an=n("ol",{start:"2"},[n("li",null,[s("此时我们有匹配的格式："),n("code",null,"%d %s %d"),s("，那么对应的匹配结果为：")])],-1),en=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"符号"),n("th",null,"内容")])]),n("tbody",null,[n("tr",null,[n("td",null,"%d"),n("td")]),n("tr",null,[n("td",null,"%s"),n("td")]),n("tr",null,[n("td",null,"%d"),n("td")])])],-1),tn=o(`<p><strong>填空，使用<code>scanf()</code>输入两个整数变量:</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>__<span class="token punctuation">,</span> ___num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>答案</summary><p><code>num1</code></p><p><code>&amp;</code>（取址符）</p></details><h2 id="_7-代码注释" tabindex="-1"><a class="header-anchor" href="#_7-代码注释" aria-hidden="true">#</a> 7. 代码注释</h2><h3 id="_7-1-多行注释" tabindex="-1"><a class="header-anchor" href="#_7-1-多行注释" aria-hidden="true">#</a> 7.1 多行注释</h3><p>注释是程序代码的解释信息，你可以在程序中添加注释，让代码更易阅读理解。编译器会<strong>忽略注释</strong>，所以它们对程序没有影响。</p><p>注释以斜线 <code>/*</code> 开始，以斜线 <code>*/</code> 结束，可以出现在代码的任何地方。 注释可以和语句在同一行，也可以跨越多行。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">/* 简单的c语程序
 *  Version 1.0
 */</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* 输出字符串 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>正如你所看到的，注释向读者澄清了程序的意图。使用注释来澄清代码段背后的目的和逻辑。</p></blockquote><h3 id="_7-2-单行注释" tabindex="-1"><a class="header-anchor" href="#_7-2-单行注释" aria-hidden="true">#</a> 7.2 单行注释</h3><p>C++ 引入了双斜线注释 <code>//</code> 作为注释单行的一种方式。大部分 C 语言编译器也支持单行注释。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// 声明int变量x</span>
    
    <span class="token comment">//%d 占位符，此处代表x</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>给代码添加注释是良好的编程实践。它有助于你和他人清楚地了解代码。</p></blockquote><h2 id="_8-算术运算符" tabindex="-1"><a class="header-anchor" href="#_8-算术运算符" aria-hidden="true">#</a> 8. 算术运算符</h2><p>C 支持的 <strong>算术运算符</strong>：<code>+</code>（加法）、<code>-</code>（减法）、<code>*</code>（乘法）、<code>/</code>（除法）和 <code>%</code>（模除法）。</p><p>运算符经常用来组成一个<strong>算术表达式</strong>，如<code>10+5</code>，在这种情况下，它包含两个<strong>操作数</strong>和<strong>加法</strong>运算符。</p><p>算术表达式经常用于赋值语句中。 <strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> area<span class="token punctuation">;</span>

    area <span class="token operator">=</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 50 */</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-1-除法" tabindex="-1"><a class="header-anchor" href="#_8-1-除法" aria-hidden="true">#</a> 8.1 除法</h3><p>C 语言有两个除法运算符: <code>/</code> 和 <code>%</code>。 根据操作数的数据类型，除法 <code>/</code> 运算符有不同的表现。</p><p>当两个操作数都是 <strong>int</strong> 数据类型时，为<strong>整数除法</strong>，也称为<strong>截断除法</strong>，去掉任何余数，结果是一个整数。</p><p>当一个或两个操作数都是实数（<code>float</code> 或 <code>double</code> ）时，结果是一个实数。</p><p><code>%</code> 运算符只返回整数除法的余数。它对许多算法很有用，如欧几里得算法求最大公约数。但<strong>模数除法</strong>不能在浮点数上执行。</p><p>下面的例子演示了除法：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> quotient<span class="token punctuation">,</span> remainder<span class="token punctuation">;</span>
    <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">4.2</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> f2 <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> result<span class="token punctuation">;</span>

    quotient <span class="token operator">=</span> i1 <span class="token operator">/</span> i2<span class="token punctuation">;</span>  <span class="token comment">// 3</span>
    remainder <span class="token operator">=</span> i1 <span class="token operator">%</span> i2<span class="token punctuation">;</span>  <span class="token comment">// 1</span>
    result <span class="token operator">=</span> f1 <span class="token operator">/</span> f2<span class="token punctuation">;</span>  <span class="token comment">// 1.68</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> quotient<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> remainder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f \\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>下面代码，<code>result</code>最终等于多少？</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),cn=n("p",null,[n("strong",null,"题目："),s(" 两位数操作练习")],-1),on=n("p",null,[n("strong",null,"要求：")],-1),pn=n("p",null,"编写一个 C 语言程序，执行以下操作：",-1),ln=n("ol",null,[n("li",null,"提示用户输入一个两位数的整数。"),n("li",null,"确保用户输入的是一个有效的两位数。否则，提示用户重新输入。"),n("li",null,"计算并显示该整数的十位数和个位数的和。"),n("li",null,"翻转整数，并显示翻转后的结果。")],-1),un=n("p",null,[n("strong",null,"示例：")],-1),dn=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`请输入一个两位数的整数：123
输入错误！请输入一个两位数。
请输入一个两位数的整数：89
十位数和个位数的和为: 17
翻转后的整数为: 98
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rn=n("p",null,[n("strong",null,"解答：")],-1),kn=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" number"),n("span",{class:"token punctuation"},","),s(" tens"),n("span",{class:"token punctuation"},","),s(" ones"),n("span",{class:"token punctuation"},","),s(" sum"),n("span",{class:"token punctuation"},","),s(" reversed"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 获取用户输入"),s(`
        `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"请输入一个两位数的整数："'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"scanf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),s("number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 检查输入是否为两位数"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("number "),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token operator"},"||"),s(" number "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"99"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"输入错误！请输入一个两位数。\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 计算十位数和个位数"),s(`
    tens `),n("span",{class:"token operator"},"="),s(" number "),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),s(`
    ones `),n("span",{class:"token operator"},"="),s(" number "),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 计算它们的和"),s(`
    sum `),n("span",{class:"token operator"},"="),s(" tens "),n("span",{class:"token operator"},"+"),s(" ones"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"十位数和个位数的和为: %d\\n"'),n("span",{class:"token punctuation"},","),s(" sum"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 翻转整数"),s(`
    reversed `),n("span",{class:"token operator"},"="),s(" ones "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"10"),s(),n("span",{class:"token operator"},"+"),s(" tens"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"翻转后的整数为: %d\\n"'),n("span",{class:"token punctuation"},","),s(" reversed"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),mn=n("p",null,"通过上述代码，用户可以多次尝试输入，直到输入一个有效的两位数为止。",-1),vn=o(`<h3 id="_8-2-运算符优先级" tabindex="-1"><a class="header-anchor" href="#_8-2-运算符优先级" aria-hidden="true">#</a> 8.2 运算符优先级</h3><p>C 语言根据运算符的<strong>优先级</strong>来计算算术表达式。</p><p><code>+</code> 和 <code>-</code> 的优先级相同，<code>*</code>、<code>/</code> 和 <code>%</code> 的优先级也相同。</p><p>首先按照从左到右的顺序执行 <code>*</code>、<code>/</code> 和 <code>%</code>，然后是 <code>+</code> 和 <code>-</code> 。 你可以通过使用圆括号 <code>()</code> 来改变计算的顺序，表示哪些运算要先执行。</p><p>例如，<code>5+3*2 </code>的结果是 11，而 <code>(5+3)*2</code> 的结果是16。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result<span class="token punctuation">;</span>
    result <span class="token operator">=</span> a <span class="token operator">-</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>  <span class="token comment">// 4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">/</span> c<span class="token punctuation">;</span>  <span class="token comment">// 8</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> c<span class="token punctuation">;</span>  <span class="token comment">// 5</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d \\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>C 在执行计算算术表达式时，对于顺序无关的运算可能不是严格的从左到右计算。例如，<code>x*y*z</code> 可能被视为<code>(x * y) * z</code> 或 <code>x * (y * z)</code>。如果顺序很重要，请将表达式分成不同的语句。</p></div><p><strong>练习：</strong> 填空，变量 <code>x</code> 减去 <code>y</code>，再相加 <code>z</code> 并将结果赋值给 <code>result</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> res <span class="token operator">=</span> x _____ y _______ z<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>C 语言运算符优先级</summary><p>C 语言的运算符优先级决定了表达式中多个运算符的运算顺序。以下是 C 语言运算符的优先级列表，从最高到最低：</p><ol><li><p><strong>后缀</strong>：</p><ul><li><code>()</code>: 函数调用</li><li><code>[]</code>: 数组下标</li><li><code>.</code>: 结构体成员选择</li><li><code>-&gt;</code>: 通过指针选择结构体/联合体成员</li><li><code>++</code>: 后缀递增</li><li><code>--</code>: 后缀递减</li></ul></li><li><p><strong>前缀</strong>：</p><ul><li><code>++</code>: 前缀递增</li><li><code>--</code>: 前缀递减</li><li><code>+</code>: 正号</li><li><code>-</code>: 负号</li><li><code>!</code>: 逻辑非</li><li><code>~</code>: 位非</li><li><code>*</code>: 解引用</li><li><code>&amp;</code>: 取址</li><li><code>sizeof</code>: 获取大小</li><li><code>_Alignof</code>: 对齐要求 (C11起)</li><li><code>(类型)</code>：强制类型转换</li></ul></li><li><p><strong>乘除</strong>：</p><ul><li><code>*</code>: 乘</li><li><code>/</code>: 除</li><li><code>%</code>: 取余</li></ul></li><li><p><strong>加减</strong>：</p><ul><li><code>+</code>: 加</li><li><code>-</code>: 减</li></ul></li><li><p><strong>位移</strong>：</p><ul><li><code>&lt;&lt;</code>: 左移</li><li><code>&gt;&gt;</code>: 右移</li></ul></li><li><p><strong>关系</strong>：</p><ul><li><code>&lt;</code>: 小于</li><li><code>&lt;=</code>: 小于等于</li><li><code>&gt;</code>: 大于</li><li><code>&gt;=</code>: 大于等于</li></ul></li><li><p><strong>相等</strong>：</p><ul><li><code>==</code>: 等于</li><li><code>!=</code>: 不等于</li></ul></li><li><p><strong>位与</strong>：</p><ul><li><code>&amp;</code></li></ul></li><li><p><strong>位异或</strong>：</p><ul><li><code>^</code></li></ul></li><li><p><strong>位或</strong>：</p><ul><li><code>|</code></li></ul></li><li><p><strong>逻辑与</strong>：</p><ul><li><code>&amp;&amp;</code></li></ul></li><li><p><strong>逻辑或</strong>：</p><ul><li><code>||</code></li></ul></li><li><p><strong>条件</strong>：</p><ul><li><code>? :</code> (三元运算符)</li></ul></li><li><p><strong>赋值</strong>：</p><ul><li><code>=</code>: 赋值</li><li><code>+=</code>: 加并赋值</li><li><code>-=</code>: 减并赋值</li><li><code>*=</code>: 乘并赋值</li><li><code>/=</code>: 除并赋值</li><li><code>%=</code>: 取余并赋值</li><li><code>&lt;&lt;=</code>: 左移并赋值</li><li><code>&gt;&gt;=</code>: 右移并赋值</li><li><code>&amp;=</code>: 位与并赋值</li><li><code>^=</code>: 位异或并赋值</li><li><code>|=</code>: 位或并赋值</li></ul></li><li><p><strong>逗号</strong>：</p><ul><li><code>,</code> (逗号运算符)</li></ul></li></ol><p>在一个复杂的表达式中，你可以使用括号 <code>()</code> 来改变运算顺序，明确优先级。</p></details><h3 id="_8-3-类型转换" tabindex="-1"><a class="header-anchor" href="#_8-3-类型转换" aria-hidden="true">#</a> 8.3 类型转换</h3><p>当一个算术表达式包含不同数据类型的操作数时，它们会在一个称为<strong>类型转换</strong>的过程中自动进行必要的转换。</p><p>例如，在一个同时涉及浮点数 <code>float</code> 和整数 <code>int</code> 的计算中，编译器将把整数值转换为浮点数。</p><p>在下面的程序中，变量 <strong>increase</strong> 被自动转换为<strong>浮点数</strong>：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> price <span class="token operator">=</span> <span class="token number">6.50</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> increase <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> new_price<span class="token punctuation">;</span>

    new_price <span class="token operator">=</span> price <span class="token operator">+</span> increase<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;New price is %4.2f&quot;</span><span class="token punctuation">,</span> new_price<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Output: New price is 8.50 */</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，格式指定符包括 <code>4.2</code>，表示浮点数将打印在一个至少 4 个字符宽的空间中，并有 2 个小数位。</p><details class="hint-container details"><summary>C 语言精度顺序</summary><p>在 C 语言中，当两个不同的数据类型进行运算时，C 语言会进行自动类型转换，以确保数据不会因为类型不匹配而发生错误。这种转换通常是根据类型的“精度”来进行的。以下是 C 语言中基本数据类型的精度顺序，从最低到最高：</p><ol><li><code>char</code>、<code>unsigned char</code></li><li><code>short int</code>、<code>unsigned short int</code></li><li><code>int</code>、<code>unsigned int</code></li><li><code>long int</code>、<code>unsigned long int</code></li><li><code>long long int</code>、<code>unsigned long long int</code></li><li><code>float</code></li><li><code>double</code></li><li><code>long double</code></li></ol><p>当两个不同类型的值进行运算时，C 语言会自动将精度较低的类型转换为精度较高的类型，然后再进行运算。</p><p>例如，如果你有一个 <code>int</code> 值和一个 <code>double</code> 值并将它们相加，C 语言会首先将 <code>int</code> 值转换为 <code>double</code>，然后再进行加法运算。</p><p>注意：这种自动类型转换可能会引起某些不预期的问题，尤其是当涉及到有符号和无符号类型时。因此，编程时最好明确数据类型，确保类型转换的准确性。</p></details><p>当你想把表达式的结果强制转换成不同的类型时，你可以通过<strong>类型转换</strong>进行显式的转换，如下代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> average<span class="token punctuation">;</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token comment">// total 强制转换为float 类型</span>
    average <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> total <span class="token operator">/</span> count<span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%4.2f&quot;</span><span class="token punctuation">,</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不进行类型转换，变量 <code>average</code> 将赋值为 5。 显示的进行类型转换，即使编译器可以做自动类型转换，也认为是好的编程风格。</p><p><strong>填空，显示的将除法结果转换为<code>float</code>类型：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>average <span class="token operator">=</span> <span class="token punctuation">(</span>___<span class="token punctuation">)</span> total <span class="token operator">/</span> count<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8-4-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_8-4-赋值运算符" aria-hidden="true">#</a> 8.4 赋值运算符</h3><p><strong>赋值语句</strong>首先评估等号( <code>=</code> )右边的表达式，然后将该值赋给 <code>=</code> 左边的变量。 这使得在赋值语句的两边使用同一个变量是有可能的，且在编程中经常使用该特性。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">/* x 现在为 4 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了缩短此类型的赋值语句，C 语言提供了 <code>+=</code> 赋值运算符。上面的语句可以写成:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">/* x = x + 1 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>许多 C 语言的运算符都有一个相应的赋值运算符。下面的程序演示了算术赋值运算符:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>
x <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>
x <span class="token operator">*=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 6</span>
x <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// </span>
x <span class="token operator">%=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
x <span class="token operator">+=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细看一下最后一条赋值语句。右边的整个表达式被计算，然后和 <code>x</code> 相加，再赋值给 <code>x</code>。等价于 <code>x = x + (3 * 2)</code>。</p><p><strong>填空，将 int 类型变量<code>num2</code>相加到变量<code>num1</code>中：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
num1___num2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-5-自增及自减运算" tabindex="-1"><a class="header-anchor" href="#_8-5-自增及自减运算" aria-hidden="true">#</a> 8.5 自增及自减运算</h3><p>给一个变量加1可以用<strong>自增运算符</strong> <code>++</code> 来完成。同样地，<strong>自减运算符</strong> <code>--</code> 用于从一个变量中减去1。 <strong>例如</strong>:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>z<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">/* z 减去 1 */</span>
y<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">/* y 增加 1 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>自增和自减运算符分为<strong>前缀</strong>（在变量名之前）或<strong>后缀</strong>（在变量名之后）。在赋值语句中，前缀或后缀 自增、自减结果不一样，如下面的例子：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
    
    z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> z<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">/* z先赋值给x，x=3，之后z 自减，z=2*/</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x=%d \\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> <span class="token operator">++</span>y<span class="token punctuation">;</span>  <span class="token comment">/* y先自增1，y=4, 之后y赋值给x，x=4 */</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x=%d \\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;y=%d \\n&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>前缀</strong>形式是先增加、减少变量，然后在赋值语句中使用它。</li><li><strong>后缀</strong>形式首先使用变量的值，然后再进行增减。</li></ul><p><strong>下面代码，变量 <code>x</code> 最终等于多少？</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
x<span class="token operator">++</span><span class="token punctuation">;</span>
x<span class="token operator">+=</span> y<span class="token operator">--</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-6-对比学习" tabindex="-1"><a class="header-anchor" href="#_8-6-对比学习" aria-hidden="true">#</a> 8.6 对比学习</h3><p><strong>1. x--;</strong></p>`,44),bn=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
    y `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(" x"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d \\n"'),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ---output---"),s(`
`),n("span",{class:"token number"},"8"),s(`
`),n("span",{class:"token number"},"18"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gn=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
    y `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(" x"),n("span",{class:"token punctuation"},";"),s(`
    x `),n("span",{class:"token operator"},"="),s(" x "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d \\n"'),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ---output---"),s(`
`),n("span",{class:"token number"},"8"),s(`
`),n("span",{class:"token number"},"18"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),hn=n("p",null,[n("strong",null,"2. --x;")],-1),fn=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
    y `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token operator"},"--"),s("x"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d \\n"'),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ---output---"),s(`
`),n("span",{class:"token number"},"8"),s(`
`),n("span",{class:"token number"},"16"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),yn=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
    x `),n("span",{class:"token operator"},"="),s(" x "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    y `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(" x"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d \\n"'),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ---output---"),s(`
`),n("span",{class:"token number"},"8"),s(`
`),n("span",{class:"token number"},"16"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),wn=n("p",null,[n("strong",null,"3. x++;")],-1),_n=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
    y `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(" x"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d \\n"'),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ---output---"),s(`
`),n("span",{class:"token number"},"10"),s(` 
`),n("span",{class:"token number"},"18"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),xn=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
    y `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(" x"),n("span",{class:"token punctuation"},";"),s(`
    x `),n("span",{class:"token operator"},"="),s(" x "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d \\n"'),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ---output---"),s(`
`),n("span",{class:"token number"},"10"),s(` 
`),n("span",{class:"token number"},"18"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),qn=n("p",null,[n("strong",null,"4. ++x;")],-1),An=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
    y `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token operator"},"++"),s("x"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d \\n"'),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// ---output---"),s(`
`),n("span",{class:"token number"},"10"),s(` 
`),n("span",{class:"token number"},"20"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Cn=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
    x `),n("span",{class:"token operator"},"="),s(" x "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
    y `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"*"),s(" x"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d \\n"'),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d"'),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token comment"},"// ---output---"),s(`
`),n("span",{class:"token number"},"10"),s(` 
`),n("span",{class:"token number"},"20"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),zn=o(`<h2 id="_9-练习" tabindex="-1"><a class="header-anchor" href="#_9-练习" aria-hidden="true">#</a> 9. 练习</h2><ol><li><p>C 语言执行的主入口是？</p><p>A. 代码第一行</p><p>B. <code>main() </code>函数</p><p>C. <code>&lt;stdio.h&gt;</code> 头文件</p></li><li><p>填空，使用 <code>printf</code> 输出文本&quot;<code>I love C</code>&quot;:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">___</span><span class="token punctuation">(</span><span class="token string">&quot;I love C&quot;</span><span class="token punctuation">)</span>___
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>下面哪一项是 c 语言单行注释？</p><p>A. <code>##</code> 单行注释</p><p>B. <code>**</code> 单行注释</p><p>C. <code>//</code> 单行注释</p></li><li><p>填空，声明一个变量 <code>sum</code>，并将变量 <code>a</code>、<code>b</code> 相加赋值给 <code>sum</code>:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>int___ <span class="token operator">=</span> a ___ b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>填空，输出变量 <code>v</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">42135</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> ___<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',3),Hn={class:"hint-container info"},Wn=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),Pn=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Linux、Web、Sql」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),In=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),Sn={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},Yn=n("p",null,"方法二：微信：Jiabcdefh",-1),Tn=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function En(Nn,Qn){const p=l("CodeTabs"),i=l("Tabs"),u=l("ExternalLinkIcon");return m(),v("div",null,[g,c(p,{id:"39",data:[{id:"1"},{id:"2"}]},{title0:a(({value:e,isActive:t})=>[s("1")]),title1:a(({value:e,isActive:t})=>[s("2")]),tab0:a(({value:e,isActive:t})=>[h]),tab1:a(({value:e,isActive:t})=>[f]),_:1}),y,c(p,{id:"106",data:[{id:"use \\n"},{id:"not use \\n"},{id:"use \\n"}]},{title0:a(({value:e,isActive:t})=>[s("use \\n")]),title1:a(({value:e,isActive:t})=>[s("not use \\n")]),title2:a(({value:e,isActive:t})=>[s("use \\n")]),tab0:a(({value:e,isActive:t})=>[w]),tab1:a(({value:e,isActive:t})=>[_]),tab2:a(({value:e,isActive:t})=>[x]),_:1}),q,c(p,{id:"166",data:[{id:"code"},{id:"注释"}]},{title0:a(({value:e,isActive:t})=>[s("code")]),title1:a(({value:e,isActive:t})=>[s("注释")]),tab0:a(({value:e,isActive:t})=>[A]),tab1:a(({value:e,isActive:t})=>[C]),_:1}),z,c(p,{id:"332",data:[{id:"声明"},{id:"声明2"}]},{title0:a(({value:e,isActive:t})=>[s("声明")]),title1:a(({value:e,isActive:t})=>[s("声明2")]),tab0:a(({value:e,isActive:t})=>[H]),tab1:a(({value:e,isActive:t})=>[W]),_:1}),P,n("details",I,[S,c(i,{id:"619",data:[{id:"解析"},{id:"示例"}]},{title0:a(({value:e,isActive:t})=>[s("解析")]),title1:a(({value:e,isActive:t})=>[s("示例")]),tab0:a(({value:e,isActive:t})=>[Y,T,E,N,Q]),tab1:a(({value:e,isActive:t})=>[V,B]),_:1})]),J,c(p,{id:"991",data:[{id:"demo1"},{id:"demo2"}]},{title0:a(({value:e,isActive:t})=>[s("demo1")]),title1:a(({value:e,isActive:t})=>[s("demo2")]),tab0:a(({value:e,isActive:t})=>[L]),tab1:a(({value:e,isActive:t})=>[O]),_:1}),G,c(p,{id:"1324",data:[{id:"demo"},{id:"十进制整数 '%d' 的使用"},{id:"字符 '%c' 的使用"},{id:"字符串 '%s' 的使用"},{id:"浮点数 '%f' 的使用"},{id:"十六进制整数 '%x' 的使用"},{id:"忽略输入字段 '*'"}]},{title0:a(({value:e,isActive:t})=>[s("demo")]),title1:a(({value:e,isActive:t})=>[s("十进制整数 '%d' 的使用")]),title2:a(({value:e,isActive:t})=>[s("字符 '%c' 的使用")]),title3:a(({value:e,isActive:t})=>[s("字符串 '%s' 的使用")]),title4:a(({value:e,isActive:t})=>[s("浮点数 '%f' 的使用")]),title5:a(({value:e,isActive:t})=>[s("十六进制整数 '%x' 的使用")]),title6:a(({value:e,isActive:t})=>[s("忽略输入字段 '*'")]),tab0:a(({value:e,isActive:t})=>[j]),tab1:a(({value:e,isActive:t})=>[D]),tab2:a(({value:e,isActive:t})=>[Z]),tab3:a(({value:e,isActive:t})=>[R]),tab4:a(({value:e,isActive:t})=>[X]),tab5:a(({value:e,isActive:t})=>[F]),tab6:a(({value:e,isActive:t})=>[K]),_:1}),M,c(i,{id:"1455",data:[{id:"解析"}]},{title0:a(({value:e,isActive:t})=>[s("解析")]),tab0:a(({value:e,isActive:t})=>[U,$,nn,sn,an,en]),_:1}),tn,c(i,{id:"1625",data:[{id:"练习"}]},{title0:a(({value:e,isActive:t})=>[s("练习")]),tab0:a(({value:e,isActive:t})=>[cn,on,pn,ln,un,dn,rn,kn,mn]),_:1}),vn,c(p,{id:"2195",data:[{id:"x-- 代码"},{id:"原代码"}]},{title0:a(({value:e,isActive:t})=>[s("x-- 代码")]),title1:a(({value:e,isActive:t})=>[s("原代码")]),tab0:a(({value:e,isActive:t})=>[bn]),tab1:a(({value:e,isActive:t})=>[gn]),_:1}),hn,c(p,{id:"2206",data:[{id:"--x 代码"},{id:"原代码"}]},{title0:a(({value:e,isActive:t})=>[s("--x 代码")]),title1:a(({value:e,isActive:t})=>[s("原代码")]),tab0:a(({value:e,isActive:t})=>[fn]),tab1:a(({value:e,isActive:t})=>[yn]),_:1}),wn,c(p,{id:"2217",data:[{id:"x++ 代码"},{id:"原代码"}]},{title0:a(({value:e,isActive:t})=>[s("x++ 代码")]),title1:a(({value:e,isActive:t})=>[s("原代码")]),tab0:a(({value:e,isActive:t})=>[_n]),tab1:a(({value:e,isActive:t})=>[xn]),_:1}),qn,c(p,{id:"2228",data:[{id:"++x 代码"},{id:"原代码"}]},{title0:a(({value:e,isActive:t})=>[s("++x 代码")]),title1:a(({value:e,isActive:t})=>[s("原代码")]),tab0:a(({value:e,isActive:t})=>[An]),tab1:a(({value:e,isActive:t})=>[Cn]),_:1}),zn,n("div",Hn,[Wn,Pn,In,n("p",null,[s("方法一："),n("a",Sn,[s("QQ"),c(u)])]),Yn]),Tn])}const Ln=k(b,[["render",En],["__file","01.html.vue"]]);export{Ln as default};
