import{_ as t,a as e}from"./zsxq-bfUTmhj4.js";import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c,b as n,d as s,a as l,e as u}from"./app-8Z_SBykw.js";const r={},d=u(`<h2 id="question-1" tabindex="-1"><a class="header-anchor" href="#question-1" aria-hidden="true">#</a> Question 1</h2><p><strong>题目：</strong> 数字分隔与求和</p><p>编写一个 C 语言函数，实现以下功能：</p><ol><li>从用户那里接受一个不超过10位的正整数。</li><li>使用函数对该数字进行分隔，输出每一位数字。</li><li>对这些数字求和并输出。</li></ol><p><strong>函数原型：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">processAndSumDigits</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>示例：</strong></p><p>输入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>12345
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Digits<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>
Sum<span class="token operator">:</span> <span class="token number">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><p>你可以使用循环来遍历整数的每一位，并进行相应的运算。</p><p>祝你编码愉快！</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">// 声明函数原型</span>
<span class="token keyword">void</span> <span class="token function">processAndSumDigits</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> number<span class="token punctuation">;</span>

    <span class="token comment">// 从用户那里接受一个不超过10位的正整数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a positive integer (up to 10 digits): &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%ld&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 处理数字并求和</span>
    <span class="token function">processAndSumDigits</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 函数定义</span>
<span class="token keyword">void</span> <span class="token function">processAndSumDigits</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> digits<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储最多10位的整数</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 计数器用于确定数字的位数</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化和为0</span>

    <span class="token comment">// 分隔数字并存储在数组中</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        digits<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 获取数字的最后一位</span>
        sum <span class="token operator">+=</span> digits<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 将该数字添加到总和中</span>
        num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>                 <span class="token comment">// 移除数字的最后一位</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>                   <span class="token comment">// 递增计数器</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 输出每一位数字</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Digits: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 输出数字的和</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Sum: %d\\n&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注释解释：</strong></p><ol><li><code>int digits[10];</code> 这行定义了一个数组，用于存储整数的每一位。</li><li>我们使用 <code>while</code> 循环来逐位处理整数。</li><li>在 <code>while</code> 循环中，我们使用 <code>num % 10</code> 来获取整数的最后一位，并将其添加到数组中。</li><li>之后，我们将整数除以10，以便移除其最后一位。</li><li>在 <code>for</code> 循环中，我们从数组的最后一个元素开始遍历（即整数的第一位），并输出每一位。</li></ol><p>此代码将接受用户输入的整数，然后输出它的每一位和这些数字的总和。</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',19),k={class:"hint-container info"},m=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),v=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Linux、Web、Sql」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),b=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),g={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"方法二：微信：Jiabcdefh",-1),h=n("figure",null,[n("img",{src:t,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function _(y,w){const a=o("ExternalLinkIcon");return i(),c("div",null,[d,n("div",k,[m,v,b,n("p",null,[s("方法一："),n("a",g,[s("QQ"),l(a)])]),f]),h])}const A=p(r,[["render",_],["__file","01-c-function.html.vue"]]);export{A as default};
