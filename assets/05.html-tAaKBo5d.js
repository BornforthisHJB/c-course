import{_ as u,a as r}from"./zsxq-bfUTmhj4.js";import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as k,c as m,a as o,w as t,b as n,d as s,e as a}from"./app-mD6-6SGI.js";const v="/c-course/assets/image-20231017171525740-TNvoAffD.png",b="/c-course/assets/image-20231017173911201-sl2D_4We.png",g={},h=a(`<h2 id="_1-结构体-struct" tabindex="-1"><a class="header-anchor" href="#_1-结构体-struct" aria-hidden="true">#</a> 1. 结构体 struct</h2><h3 id="_1-1-结构体" tabindex="-1"><a class="header-anchor" href="#_1-1-结构体" aria-hidden="true">#</a> 1.1 结构体</h3><p>一个<strong>结构体</strong>( struct )是<strong>用户自定义</strong>的数据类型，将不同数据类型的相关变量组合在一起。</p><p>结构体的<strong>声明</strong>使用关键字 <strong>struct</strong>，以及带有变量声明列表的大括号 <code>{}</code>，称为<strong>成员</strong>。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 课程结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">course</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>                 <span class="token comment">// 课程 ID</span>
    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 课程名</span>
    <span class="token keyword">float</span> hours<span class="token punctuation">;</span>        <span class="token comment">// 课程时长</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该结构体语句定义了一个新数据类型 <code>course</code>，它有三个成员。 结构体成员可以是任何数据类型，包括基本类型、字符串、数组、指针，甚至其他结构，你将在后面的课程中学习。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不要忘了在结构体声明后面加一个分号 <code>;</code>。 结构体也称为<strong>复合</strong>或<strong>集合</strong>数据类型。有些语言将结构体称为<strong>记录</strong>。</p></div><ul><li>填空，声明结构体 <code>human</code>:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___human <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>struct</p><p>;</p></blockquote><h3 id="_1-2-结构体变量的定义" tabindex="-1"><a class="header-anchor" href="#_1-2-结构体变量的定义" aria-hidden="true">#</a> 1.2 结构体变量的定义</h3><p>要声明结构体数据类型的变量，请使用关键字 <strong>struct</strong>，后跟 struct 标记，然后变量名。</p><p>例如，下面的语句声明了一个结构数据类型，然后使用 <strong>student</strong> 结构来声明变量 <strong>s1</strong> 和 <strong>s2</strong>。</p>`,14),y=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" age"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" grade"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" name"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"40"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"/* 声明结构体变量 */"),s(`
    `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(" s1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(" s2"),n("span",{class:"token punctuation"},";"),s(`
    
    s1`),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"19"),n("span",{class:"token punctuation"},";"),s(`
    s1`),n("span",{class:"token punctuation"},"."),s("grade "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"sprintf"),n("span",{class:"token punctuation"},"("),s("s1"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"John Bighimer"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    s2`),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},";"),s(`
    s2`),n("span",{class:"token punctuation"},"."),s("grade "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"sprintf"),n("span",{class:"token punctuation"},"("),s("s2"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Batman Jokerson"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Student: %s, %d\\n"'),n("span",{class:"token punctuation"},","),s(" s1"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(" s1"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Student: %s, %d\\n"'),n("span",{class:"token punctuation"},","),s(" s2"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(" s2"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>"),s("   "),n("span",{class:"token comment"},"// 包含标准输入输出库，为 printf 和 sprintf 函数提供支持")]),s(`

`),n("span",{class:"token comment"},"/* 定义结构体类型，描述学生信息 */"),s(`
`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" age"),n("span",{class:"token punctuation"},";"),s("           "),n("span",{class:"token comment"},"// 学生的年龄"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" grade"),n("span",{class:"token punctuation"},";"),s("         "),n("span",{class:"token comment"},"// 学生的年级"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" name"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"40"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s("     "),n("span",{class:"token comment"},"// 学生的名字，最大长度为 39 字符（因为最后一个字符是字符串终止符 '\\0'）"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"/* 在 main 函数内部声明两个结构体变量 */"),s(`
    `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(" s1"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 第一个学生"),s(`
    `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(" s2"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 第二个学生"),s(`
    
    `),n("span",{class:"token comment"},"/* 为第一个学生赋值 */"),s(`
    s1`),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"19"),n("span",{class:"token punctuation"},";"),s("                  "),n("span",{class:"token comment"},"// 设置年龄"),s(`
    s1`),n("span",{class:"token punctuation"},"."),s("grade "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},";"),s("                 "),n("span",{class:"token comment"},"// 设置年级"),s(`
    `),n("span",{class:"token function"},"sprintf"),n("span",{class:"token punctuation"},"("),s("s1"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"John Bighimer"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 使用 sprintf 函数为名字赋值"),s(`
    
    `),n("span",{class:"token comment"},"/* 为第二个学生赋值 */"),s(`
    s2`),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},";"),s("                  "),n("span",{class:"token comment"},"// 设置年龄"),s(`
    s2`),n("span",{class:"token punctuation"},"."),s("grade "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),s("                "),n("span",{class:"token comment"},"// 设置年级"),s(`
    `),n("span",{class:"token function"},"sprintf"),n("span",{class:"token punctuation"},"("),s("s2"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Batman Jokerson"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 使用 sprintf 函数为名字赋值"),s(`
    
    `),n("span",{class:"token comment"},"/* 打印两个学生的信息 */"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Student: %s, %d\\n"'),n("span",{class:"token punctuation"},","),s(" s1"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(" s1"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 打印第一个学生的名字和年龄"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Student: %s, %d\\n"'),n("span",{class:"token punctuation"},","),s(" s2"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(" s2"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 打印第二个学生的名字和年龄"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s("  "),n("span",{class:"token comment"},"// 主函数结束，返回 0"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=a(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>一个结构体变量存储在一个<strong>连续</strong>的内存块中。必须使用 <strong>sizeof</strong> 操作符来获取结构体所需的字节数，就像使用基本数据类型一样。</p></div><ol><li>填空，声明一个结构体变量 <code>h1</code>:</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">human</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
___ human h1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>struct</p></blockquote><h3 id="_1-3-声明结构体变量" tabindex="-1"><a class="header-anchor" href="#_1-3-声明结构体变量" aria-hidden="true">#</a> 1.3 声明结构体变量</h3><p>结构体变量也可以在声明中进行初始化，在大括号 <code>{}</code> 内按顺序列出初始值：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> grade<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* declare two variables */</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&quot;John Birghimer&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> s2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;Batman Jokerson&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Student: %s, %d\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Student: %s, %d\\n&quot;</span><span class="token punctuation">,</span> s2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想在声明后使用大括号 <code>{}</code> 来初始化一个结构，则还需要写明<strong>类型转换</strong>，如以下语句所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> grade<span class="token punctuation">;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> s1<span class="token punctuation">;</span> <span class="token comment">// 声明结构体变量</span>
    
    <span class="token comment">// 类型转换声明</span>
    s1<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&quot;John Birghimer&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Student: %s, %d\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在初始化结构体变量时使用命名的成员来初始化相应的成员：</p>`,10),_=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" age"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" grade"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" name"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"40"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(" s1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token punctuation"},"."),s("grade "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"."),s("age "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"19"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"."),s("name "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"John Birghimer"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Name: %s, Age: %d, Grade: %d\\n"'),n("span",{class:"token punctuation"},","),s(" s1"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(" s1"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},","),s(" s1"),n("span",{class:"token punctuation"},"."),s("grade"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=a(`<p>在上面的例子中，<code>.grade</code> 指的是结构中的 <code>grade</code> 成员。同样地，<code>.age</code> 和 <code>.name</code> 指的是 <code>age</code> 和 <code>name</code> 成员。</p><ul><li>填空，使用类型转换初始化 struct 变量 <code>h1</code>：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">human</span> h1<span class="token punctuation">;</span>
h1 <span class="token operator">=</span> <span class="token punctuation">(</span>___human<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-结构体变量的引用" tabindex="-1"><a class="header-anchor" href="#_1-4-结构体变量的引用" aria-hidden="true">#</a> 1.4 结构体变量的引用</h3><p>可以通过在变量名和成员名之间使用点运算符<code>.</code>来访问结构体的成员变量。</p><p>例如，要给 <strong>s1</strong> 结构体变量的 <strong>age</strong> 成员赋值，可以使用如下语句：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以把一个结构赋值给另一个同类型的结构。</p>`,8),q=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" age"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" grade"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" name"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"40"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(" s1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"19"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Jason"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"student"),s(" s2"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Assigning, s2 = s1\\n"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    s2 `),n("span",{class:"token operator"},"="),s(" s1"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Results, Name: %s, Age: %d, Grade: %d\\n"'),n("span",{class:"token punctuation"},","),s(" s2"),n("span",{class:"token punctuation"},"."),s("name"),n("span",{class:"token punctuation"},","),s(" s2"),n("span",{class:"token punctuation"},"."),s("age"),n("span",{class:"token punctuation"},","),s(" s2"),n("span",{class:"token punctuation"},"."),s("grade"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=a(`<p>下面的代码演示了使用一个结构：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">course</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> hours<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">course</span> cs1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">341279</span><span class="token punctuation">,</span> <span class="token string">&quot;Intro to C++&quot;</span><span class="token punctuation">,</span> <span class="token number">12.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">course</span> cs2<span class="token punctuation">;</span>

    <span class="token comment">/* 初始化 cs2 */</span>
    cs2<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">341281</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>cs2<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">&quot;Advanced C++&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cs2<span class="token punctuation">.</span>hours <span class="token operator">=</span> <span class="token number">14.25</span><span class="token punctuation">;</span>

    <span class="token comment">/* 打印成员信息 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\t%s\\t%4.2f\\n&quot;</span><span class="token punctuation">,</span> cs1<span class="token punctuation">.</span>id<span class="token punctuation">,</span> cs1<span class="token punctuation">.</span>title<span class="token punctuation">,</span> cs1<span class="token punctuation">.</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\t%s\\t%4.2f\\n&quot;</span><span class="token punctuation">,</span> cs2<span class="token punctuation">.</span>id<span class="token punctuation">,</span> cs2<span class="token punctuation">.</span>title<span class="token punctuation">,</span> cs2<span class="token punctuation">.</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串赋值需要来自 <code>string.h</code> 库的 <code>strcpy()</code>。 还要注意格式指定符 <code>%4.2f</code> 包括宽度和精度选项。</p><ul><li>填空，将变量 <code>h</code> 的年龄增加2岁：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">human</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment">// 年龄</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
___human h1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
h1___age <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Answer</summary><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><h3 id="_1-5-使用-typedef" tabindex="-1"><a class="header-anchor" href="#_1-5-使用-typedef" aria-hidden="true">#</a> 1.5 使用 typedef</h3><p><strong>typedef</strong> 关键字 创建一个类型定义，该定义可简化代码并使程序更易于阅读。</p><p><strong>typedef</strong> 通常与结构体一起使用，因为它消除了在声明变量时使用关键字 struct 的需要。</p><p>例如:</p>',10),A=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<string.h>")]),s(`

`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" id"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"char"),s(" title"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"40"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"float"),s(" hours"),n("span",{class:"token punctuation"},";"),s(` 
`),n("span",{class:"token punctuation"},"}"),s(" course"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    course cs1`),n("span",{class:"token punctuation"},";"),s(`
    course cs2`),n("span",{class:"token punctuation"},";"),s(`

    cs1`),n("span",{class:"token punctuation"},"."),s("id "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"123456"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"strcpy"),n("span",{class:"token punctuation"},"("),s("cs1"),n("span",{class:"token punctuation"},"."),s("title"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"JavaScript Basics"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cs1`),n("span",{class:"token punctuation"},"."),s("hours "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"12.30"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"/* 初始化 cs2 */"),s(`
    cs2`),n("span",{class:"token punctuation"},"."),s("id "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"341281"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"strcpy"),n("span",{class:"token punctuation"},"("),s("cs2"),n("span",{class:"token punctuation"},"."),s("title"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Advanced C++"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    cs2`),n("span",{class:"token punctuation"},"."),s("hours "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"14.25"),n("span",{class:"token punctuation"},";"),s(`
       
    `),n("span",{class:"token comment"},"/* 打印信息 */"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d\\t%s\\t%4.2f\\n"'),n("span",{class:"token punctuation"},","),s(" cs1"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},","),s(" cs1"),n("span",{class:"token punctuation"},"."),s("title"),n("span",{class:"token punctuation"},","),s(" cs1"),n("span",{class:"token punctuation"},"."),s("hours"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%d\\t%s\\t%4.2f\\n"'),n("span",{class:"token punctuation"},","),s(" cs2"),n("span",{class:"token punctuation"},"."),s("id"),n("span",{class:"token punctuation"},","),s(" cs2"),n("span",{class:"token punctuation"},"."),s("title"),n("span",{class:"token punctuation"},","),s(" cs2"),n("span",{class:"token punctuation"},"."),s("hours"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=a(`<p>注意，不再使用结构标签，而是在结构声明之前显示 typedef 名称。</p><p>现在，变量声明中不再需要使用 struct 一词，从而使代码更简洁，更易于阅读。</p><ul><li>填空，使用 <strong>typedef</strong> 关键字声明&quot;human&quot;结构&quot;:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>___struct <span class="token punctuation">{</span>
  <span class="token keyword">int</span> age<span class="token punctuation">;</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>___<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-结构体的妙用" tabindex="-1"><a class="header-anchor" href="#_2-结构体的妙用" aria-hidden="true">#</a> 2. 结构体的妙用</h2><h3 id="_2-1-结构体中的结构" tabindex="-1"><a class="header-anchor" href="#_2-1-结构体中的结构" aria-hidden="true">#</a> 2.1 结构体中的结构</h3><p>一个结构体的成员也可以是结构体。 例如，考虑以下代码：</p>`,7),C=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(" point"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"float"),s(" radius"),n("span",{class:"token punctuation"},";"),s(`
  point center`),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(" circle"),n("span",{class:"token punctuation"},";"),s(` 

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    point p`),n("span",{class:"token punctuation"},";"),s(`
    p`),n("span",{class:"token punctuation"},"."),s("x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},";"),s(`
    p`),n("span",{class:"token punctuation"},"."),s("y "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),s(`
    
    circle c`),n("span",{class:"token punctuation"},";"),s(`
    c`),n("span",{class:"token punctuation"},"."),s("radius "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3.14"),n("span",{class:"token punctuation"},";"),s(`
    c`),n("span",{class:"token punctuation"},"."),s("center "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},";"),s(`
    
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Circle radius is %.2f, center is at (%d, %d)"'),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},"."),s("radius"),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},"."),s("center"),n("span",{class:"token punctuation"},"."),s("x"),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},"."),s("center"),n("span",{class:"token punctuation"},"."),s("y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("p",null,[s("嵌套的大括号 "),n("code",null,"{}"),s(" 用来初始化属于结构的成员。"),n("code",null,"."),s(" 点运算符被两次用于访问成员的成员，如语句中:")],-1),D=n("div",{class:"language-c line-numbers-mode","data-ext":"c"},[n("pre",{c:"",class:"language-c"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},"<stdio.h>")]),s(`

`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"int"),s(" x"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"int"),s(" y"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(" point"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"typedef"),s(),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"float"),s(" radius"),n("span",{class:"token punctuation"},";"),s(`
  point center`),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(" circle"),n("span",{class:"token punctuation"},";"),s(` 

`),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    circle c `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"4.5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"printf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"%3.1f %d,%d"'),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},"."),s("radius"),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},"."),s("center"),n("span",{class:"token punctuation"},"."),s("x"),n("span",{class:"token punctuation"},","),s(" c"),n("span",{class:"token punctuation"},"."),s("center"),n("span",{class:"token punctuation"},"."),s("y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/* 4.5  1,3 */"),s(`
  
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=a(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>一个结构体的定义必须先出现，然后才能在另一个结构体中使用。</p></div><ul><li>填空，定义一个 <code>small</code> 结构体类型，并在结构体 <code>big</code> 中将成员变量 <code>s</code> 声明为 <code>small</code> 类型：</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> ___<span class="token punctuation">{</span>
    <span class="token keyword">float</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span> small<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">big</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    ___s<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Answer</summary><figure><img src="`+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><h3 id="_2-2-结构体指针" tabindex="-1"><a class="header-anchor" href="#_2-2-结构体指针" aria-hidden="true">#</a> 2.2 结构体指针</h3><p>就像变量的指针一样，结构的指针也可以被定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">myStruct</span> <span class="token operator">*</span>struct_ptr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>定义了一个指向 <em>myStruct</em> 结构体的指针。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>struct_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>struct_var<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将结构变量 <code>struct_var</code> 的地址存储在指针 <code>struct_ptr</code> 中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>struct_ptr <span class="token operator">-&gt;</span> struct_mem<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问结构成员 <code>struct_mem</code> 的值。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token comment">// Student 结构体定义</span>
<span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 结构体指针作为函数参数</span>
<span class="token keyword">void</span> <span class="token function">showStudentData</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token operator">*</span>st<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\nStudent:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Name: %s\\n&quot;</span><span class="token punctuation">,</span> st<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Number: %d\\n&quot;</span><span class="token punctuation">,</span> st<span class="token operator">-&gt;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Age: %d\\n&quot;</span><span class="token punctuation">,</span> st<span class="token operator">-&gt;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// New Student Record Creation</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> st1<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">student</span> st2<span class="token punctuation">;</span>
    
    <span class="token comment">// Filling Student 1 Details</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>st1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;Krishna&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    st1<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    st1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Filling Student 2 Details</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>st2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;Max&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    st2<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    st2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Displaying Student 1 Details</span>
    <span class="token function">showStudentData</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// Displaying Student 2 Details</span>
    <span class="token function">showStudentData</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-&gt;</code> 操作符允许通过指针访问结构体的成员。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>(*st).age</code> 与 <code>st-&gt;age</code> 相同。 同样，当使用 <strong>typedef</strong> 命名结构时，仅使用 typedef 名称以及 <code>*</code> 和指针名称来声明指针。</p></div><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 填空，声明一个指向结构的指针并使用该指针访问结构成员 <code>y</code>：</label></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span> p1<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Point</span> ____ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">;</span>
ptr<span class="token operator">-&gt;</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
ptr____y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-结构体作为函数参数" tabindex="-1"><a class="header-anchor" href="#_2-3-结构体作为函数参数" aria-hidden="true">#</a> 2.3 结构体作为函数参数</h3><p>一个函数可以具有结构体参数，当仅需要结构变量的副本时，该结构体参数将按值接受参数。</p><p>要使函数更改 struct 变量中的实际值，则需要使用指针参数。</p><p><strong>例如：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">char</span> title<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> hours<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> course<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">update_course</span><span class="token punctuation">(</span>course <span class="token operator">*</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">display_course</span><span class="token punctuation">(</span>course class<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    course cs2<span class="token punctuation">;</span>
    <span class="token function">update_course</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cs2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">display_course</span><span class="token punctuation">(</span>cs2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">update_course</span><span class="token punctuation">(</span>course <span class="token operator">*</span>class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>class<span class="token operator">-&gt;</span>title<span class="token punctuation">,</span> <span class="token string">&quot;C++ Fundamentals&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    class<span class="token operator">-&gt;</span>id <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>
    class<span class="token operator">-&gt;</span>hours <span class="token operator">=</span> <span class="token number">12.30</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">display_course</span><span class="token punctuation">(</span>course class<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\t%s\\t%3.2f\\n&quot;</span><span class="token punctuation">,</span> class<span class="token punctuation">.</span>id<span class="token punctuation">,</span> class<span class="token punctuation">.</span>title<span class="token punctuation">,</span> class<span class="token punctuation">.</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如你所见，<code>update_course()</code> 接受一个指针作为参数，而 <code>display_course()</code> 则按值接受该结构。</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 对于要更改 struct 变量中的实际值的函数：</label></li></ul><p>A. 不需要参数</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 为什么点不能实现 <code>class-&gt;id = 111;</code></label></li></ul><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',28),I={class:"hint-container info"},z=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),P=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Linux、Web、Sql」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),Q=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),T={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,"方法二：微信：Jiabcdefh",-1),E=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function F(L,G){const i=p("CodeTabs"),l=p("ExternalLinkIcon");return k(),m("div",null,[h,o(i,{id:"49",data:[{id:"Code"},{id:"注释"}]},{title0:t(({value:e,isActive:c})=>[s("Code")]),title1:t(({value:e,isActive:c})=>[s("注释")]),tab0:t(({value:e,isActive:c})=>[y]),tab1:t(({value:e,isActive:c})=>[f]),_:1}),w,_,x,q,S,A,J,C,B,D,N,n("div",I,[z,P,Q,n("p",null,[s("方法一："),n("a",T,[s("QQ"),o(l)])]),V]),E])}const j=d(g,[["render",F],["__file","05.html.vue"]]);export{j as default};
